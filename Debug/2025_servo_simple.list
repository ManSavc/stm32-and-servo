
2025_servo_simple.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038ec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003a8c  08003a8c  00004a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003aec  08003aec  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003aec  08003aec  00004aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003af4  08003af4  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003af4  08003af4  00004af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003af8  08003af8  00004af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003afc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  2000005c  08003b58  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08003b58  00005284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb59  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000192b  00000000  00000000  00010be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba0  00000000  00000000  00012510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000091f  00000000  00000000  000130b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000163e8  00000000  00000000  000139cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d1af  00000000  00000000  00029db7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e183  00000000  00000000  00036f66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c50e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003630  00000000  00000000  000c512c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  000c875c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003a74 	.word	0x08003a74

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003a74 	.word	0x08003a74

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 fb86 	bl	8000c94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f862 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f994 	bl	80008b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000590:	f000 f968 	bl	8000864 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000594:	f000 f8c6 	bl	8000724 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000598:	2100      	movs	r1, #0
 800059a:	4827      	ldr	r0, [pc, #156]	@ (8000638 <main+0xb8>)
 800059c:	f001 fbec 	bl	8001d78 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */
	  button_value =750;
 80005a0:	4b26      	ldr	r3, [pc, #152]	@ (800063c <main+0xbc>)
 80005a2:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80005a6:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */


		  if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_0))
 80005a8:	2101      	movs	r1, #1
 80005aa:	4825      	ldr	r0, [pc, #148]	@ (8000640 <main+0xc0>)
 80005ac:	f000 fe72 	bl	8001294 <HAL_GPIO_ReadPin>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d007      	beq.n	80005c6 <main+0x46>
		  	  							{  button_value = button_value + 100;	//button_value plus
 80005b6:	4b21      	ldr	r3, [pc, #132]	@ (800063c <main+0xbc>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	3364      	adds	r3, #100	@ 0x64
 80005bc:	4a1f      	ldr	r2, [pc, #124]	@ (800063c <main+0xbc>)
 80005be:	6013      	str	r3, [r2, #0]
		  	  							HAL_Delay (50);
 80005c0:	2032      	movs	r0, #50	@ 0x32
 80005c2:	f000 fbd9 	bl	8000d78 <HAL_Delay>
		  	  							}

		  	  							if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1))
 80005c6:	2102      	movs	r1, #2
 80005c8:	481d      	ldr	r0, [pc, #116]	@ (8000640 <main+0xc0>)
 80005ca:	f000 fe63 	bl	8001294 <HAL_GPIO_ReadPin>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d007      	beq.n	80005e4 <main+0x64>
		  	  							{  button_value = button_value-100;	//button_value minus
 80005d4:	4b19      	ldr	r3, [pc, #100]	@ (800063c <main+0xbc>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	3b64      	subs	r3, #100	@ 0x64
 80005da:	4a18      	ldr	r2, [pc, #96]	@ (800063c <main+0xbc>)
 80005dc:	6013      	str	r3, [r2, #0]
		  	  							HAL_Delay (50);
 80005de:	2032      	movs	r0, #50	@ 0x32
 80005e0:	f000 fbca 	bl	8000d78 <HAL_Delay>
		  	  							}

		  	  							if(button_value < 250){ button_value =250;}
 80005e4:	4b15      	ldr	r3, [pc, #84]	@ (800063c <main+0xbc>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2bf9      	cmp	r3, #249	@ 0xf9
 80005ea:	dc02      	bgt.n	80005f2 <main+0x72>
 80005ec:	4b13      	ldr	r3, [pc, #76]	@ (800063c <main+0xbc>)
 80005ee:	22fa      	movs	r2, #250	@ 0xfa
 80005f0:	601a      	str	r2, [r3, #0]
		  	  							if(button_value > 1250){ button_value = 1250;}
 80005f2:	4b12      	ldr	r3, [pc, #72]	@ (800063c <main+0xbc>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 80005fa:	4293      	cmp	r3, r2
 80005fc:	dd03      	ble.n	8000606 <main+0x86>
 80005fe:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <main+0xbc>)
 8000600:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8000604:	601a      	str	r2, [r3, #0]

		  	  							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (button_value));
 8000606:	4b0d      	ldr	r3, [pc, #52]	@ (800063c <main+0xbc>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	4b0b      	ldr	r3, [pc, #44]	@ (8000638 <main+0xb8>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	635a      	str	r2, [r3, #52]	@ 0x34

		  	  						sprintf(buffer, "button_value %d\r\n", button_value);
 8000610:	4b0a      	ldr	r3, [pc, #40]	@ (800063c <main+0xbc>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	461a      	mov	r2, r3
 8000616:	490b      	ldr	r1, [pc, #44]	@ (8000644 <main+0xc4>)
 8000618:	480b      	ldr	r0, [pc, #44]	@ (8000648 <main+0xc8>)
 800061a:	f002 fd8b 	bl	8003134 <siprintf>
		  	  						HAL_UART_Transmit(&huart2, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 800061e:	480a      	ldr	r0, [pc, #40]	@ (8000648 <main+0xc8>)
 8000620:	f7ff fdde 	bl	80001e0 <strlen>
 8000624:	4603      	mov	r3, r0
 8000626:	b29a      	uxth	r2, r3
 8000628:	f04f 33ff 	mov.w	r3, #4294967295
 800062c:	4906      	ldr	r1, [pc, #24]	@ (8000648 <main+0xc8>)
 800062e:	4807      	ldr	r0, [pc, #28]	@ (800064c <main+0xcc>)
 8000630:	f002 f9c4 	bl	80029bc <HAL_UART_Transmit>
		  if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_0))
 8000634:	e7b8      	b.n	80005a8 <main+0x28>
 8000636:	bf00      	nop
 8000638:	20000078 	.word	0x20000078
 800063c:	20000130 	.word	0x20000130
 8000640:	40020000 	.word	0x40020000
 8000644:	08003a8c 	.word	0x08003a8c
 8000648:	20000108 	.word	0x20000108
 800064c:	200000c0 	.word	0x200000c0

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	@ 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	@ 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f002 fd88 	bl	8003174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b28      	ldr	r3, [pc, #160]	@ (800071c <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	4a27      	ldr	r2, [pc, #156]	@ (800071c <SystemClock_Config+0xcc>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	@ 0x40
 8000684:	4b25      	ldr	r3, [pc, #148]	@ (800071c <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b22      	ldr	r3, [pc, #136]	@ (8000720 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a21      	ldr	r2, [pc, #132]	@ (8000720 <SystemClock_Config+0xd0>)
 800069a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000720 <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2310      	movs	r3, #16
 80006b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006c0:	2310      	movs	r3, #16
 80006c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 80006c4:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80006c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ca:	2304      	movs	r3, #4
 80006cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ce:	2304      	movs	r3, #4
 80006d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fe0e 	bl	80012f8 <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006e2:	f000 f963 	bl	80009ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	230f      	movs	r3, #15
 80006e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ea:	2302      	movs	r3, #2
 80006ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2102      	movs	r1, #2
 8000702:	4618      	mov	r0, r3
 8000704:	f001 f870 	bl	80017e8 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800070e:	f000 f94d 	bl	80009ac <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3750      	adds	r7, #80	@ 0x50
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b096      	sub	sp, #88	@ 0x58
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000738:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000742:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]
 8000752:	615a      	str	r2, [r3, #20]
 8000754:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2220      	movs	r2, #32
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f002 fd09 	bl	8003174 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000762:	4b3e      	ldr	r3, [pc, #248]	@ (800085c <MX_TIM1_Init+0x138>)
 8000764:	4a3e      	ldr	r2, [pc, #248]	@ (8000860 <MX_TIM1_Init+0x13c>)
 8000766:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8000768:	4b3c      	ldr	r3, [pc, #240]	@ (800085c <MX_TIM1_Init+0x138>)
 800076a:	22b3      	movs	r2, #179	@ 0xb3
 800076c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076e:	4b3b      	ldr	r3, [pc, #236]	@ (800085c <MX_TIM1_Init+0x138>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8000774:	4b39      	ldr	r3, [pc, #228]	@ (800085c <MX_TIM1_Init+0x138>)
 8000776:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800077a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077c:	4b37      	ldr	r3, [pc, #220]	@ (800085c <MX_TIM1_Init+0x138>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000782:	4b36      	ldr	r3, [pc, #216]	@ (800085c <MX_TIM1_Init+0x138>)
 8000784:	2200      	movs	r2, #0
 8000786:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000788:	4b34      	ldr	r3, [pc, #208]	@ (800085c <MX_TIM1_Init+0x138>)
 800078a:	2200      	movs	r2, #0
 800078c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800078e:	4833      	ldr	r0, [pc, #204]	@ (800085c <MX_TIM1_Init+0x138>)
 8000790:	f001 fa4a 	bl	8001c28 <HAL_TIM_Base_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800079a:	f000 f907 	bl	80009ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800079e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007a4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80007a8:	4619      	mov	r1, r3
 80007aa:	482c      	ldr	r0, [pc, #176]	@ (800085c <MX_TIM1_Init+0x138>)
 80007ac:	f001 fc56 	bl	800205c <HAL_TIM_ConfigClockSource>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80007b6:	f000 f8f9 	bl	80009ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007ba:	4828      	ldr	r0, [pc, #160]	@ (800085c <MX_TIM1_Init+0x138>)
 80007bc:	f001 fa83 	bl	8001cc6 <HAL_TIM_PWM_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80007c6:	f000 f8f1 	bl	80009ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ca:	2300      	movs	r3, #0
 80007cc:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007d2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007d6:	4619      	mov	r1, r3
 80007d8:	4820      	ldr	r0, [pc, #128]	@ (800085c <MX_TIM1_Init+0x138>)
 80007da:	f001 ffdf 	bl	800279c <HAL_TIMEx_MasterConfigSynchronization>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80007e4:	f000 f8e2 	bl	80009ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007e8:	2360      	movs	r3, #96	@ 0x60
 80007ea:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007f0:	2300      	movs	r3, #0
 80007f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007f4:	2300      	movs	r3, #0
 80007f6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007fc:	2300      	movs	r3, #0
 80007fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000800:	2300      	movs	r3, #0
 8000802:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000804:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000808:	2200      	movs	r2, #0
 800080a:	4619      	mov	r1, r3
 800080c:	4813      	ldr	r0, [pc, #76]	@ (800085c <MX_TIM1_Init+0x138>)
 800080e:	f001 fb63 	bl	8001ed8 <HAL_TIM_PWM_ConfigChannel>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000818:	f000 f8c8 	bl	80009ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800081c:	2300      	movs	r3, #0
 800081e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000830:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000834:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000836:	2300      	movs	r3, #0
 8000838:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	4619      	mov	r1, r3
 800083e:	4807      	ldr	r0, [pc, #28]	@ (800085c <MX_TIM1_Init+0x138>)
 8000840:	f002 f81a 	bl	8002878 <HAL_TIMEx_ConfigBreakDeadTime>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800084a:	f000 f8af 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800084e:	4803      	ldr	r0, [pc, #12]	@ (800085c <MX_TIM1_Init+0x138>)
 8000850:	f000 f8fc 	bl	8000a4c <HAL_TIM_MspPostInit>

}
 8000854:	bf00      	nop
 8000856:	3758      	adds	r7, #88	@ 0x58
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000078 	.word	0x20000078
 8000860:	40010000 	.word	0x40010000

08000864 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000868:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <MX_USART2_UART_Init+0x4c>)
 800086a:	4a12      	ldr	r2, [pc, #72]	@ (80008b4 <MX_USART2_UART_Init+0x50>)
 800086c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800086e:	4b10      	ldr	r3, [pc, #64]	@ (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000870:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000874:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000876:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800087c:	4b0c      	ldr	r3, [pc, #48]	@ (80008b0 <MX_USART2_UART_Init+0x4c>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	@ (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000888:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <MX_USART2_UART_Init+0x4c>)
 800088a:	220c      	movs	r2, #12
 800088c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088e:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000894:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <MX_USART2_UART_Init+0x4c>)
 800089c:	f002 f83e 	bl	800291c <HAL_UART_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008a6:	f000 f881 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200000c0 	.word	0x200000c0
 80008b4:	40004400 	.word	0x40004400

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	@ 0x28
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	4b33      	ldr	r3, [pc, #204]	@ (80009a0 <MX_GPIO_Init+0xe8>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	4a32      	ldr	r2, [pc, #200]	@ (80009a0 <MX_GPIO_Init+0xe8>)
 80008d8:	f043 0304 	orr.w	r3, r3, #4
 80008dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008de:	4b30      	ldr	r3, [pc, #192]	@ (80009a0 <MX_GPIO_Init+0xe8>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	f003 0304 	and.w	r3, r3, #4
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	4b2c      	ldr	r3, [pc, #176]	@ (80009a0 <MX_GPIO_Init+0xe8>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a2b      	ldr	r2, [pc, #172]	@ (80009a0 <MX_GPIO_Init+0xe8>)
 80008f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b29      	ldr	r3, [pc, #164]	@ (80009a0 <MX_GPIO_Init+0xe8>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	4b25      	ldr	r3, [pc, #148]	@ (80009a0 <MX_GPIO_Init+0xe8>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a24      	ldr	r2, [pc, #144]	@ (80009a0 <MX_GPIO_Init+0xe8>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b22      	ldr	r3, [pc, #136]	@ (80009a0 <MX_GPIO_Init+0xe8>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b1e      	ldr	r3, [pc, #120]	@ (80009a0 <MX_GPIO_Init+0xe8>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a1d      	ldr	r2, [pc, #116]	@ (80009a0 <MX_GPIO_Init+0xe8>)
 800092c:	f043 0302 	orr.w	r3, r3, #2
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <MX_GPIO_Init+0xe8>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	2120      	movs	r1, #32
 8000942:	4818      	ldr	r0, [pc, #96]	@ (80009a4 <MX_GPIO_Init+0xec>)
 8000944:	f000 fcbe 	bl	80012c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000948:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800094c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800094e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000952:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4619      	mov	r1, r3
 800095e:	4812      	ldr	r0, [pc, #72]	@ (80009a8 <MX_GPIO_Init+0xf0>)
 8000960:	f000 fb14 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000964:	2303      	movs	r3, #3
 8000966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000968:	2300      	movs	r3, #0
 800096a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800096c:	2302      	movs	r3, #2
 800096e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	4619      	mov	r1, r3
 8000976:	480b      	ldr	r0, [pc, #44]	@ (80009a4 <MX_GPIO_Init+0xec>)
 8000978:	f000 fb08 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800097c:	2320      	movs	r3, #32
 800097e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000980:	2301      	movs	r3, #1
 8000982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4619      	mov	r1, r3
 8000992:	4804      	ldr	r0, [pc, #16]	@ (80009a4 <MX_GPIO_Init+0xec>)
 8000994:	f000 fafa 	bl	8000f8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000998:	bf00      	nop
 800099a:	3728      	adds	r7, #40	@ 0x28
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40020000 	.word	0x40020000
 80009a8:	40020800 	.word	0x40020800

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b0:	b672      	cpsid	i
}
 80009b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <Error_Handler+0x8>

080009b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	4b10      	ldr	r3, [pc, #64]	@ (8000a04 <HAL_MspInit+0x4c>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000a04 <HAL_MspInit+0x4c>)
 80009c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000a04 <HAL_MspInit+0x4c>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	603b      	str	r3, [r7, #0]
 80009de:	4b09      	ldr	r3, [pc, #36]	@ (8000a04 <HAL_MspInit+0x4c>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e2:	4a08      	ldr	r2, [pc, #32]	@ (8000a04 <HAL_MspInit+0x4c>)
 80009e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ea:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <HAL_MspInit+0x4c>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009f6:	2007      	movs	r0, #7
 80009f8:	f000 fa94 	bl	8000f24 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40023800 	.word	0x40023800

08000a08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a0b      	ldr	r2, [pc, #44]	@ (8000a44 <HAL_TIM_Base_MspInit+0x3c>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d10d      	bne.n	8000a36 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a48 <HAL_TIM_Base_MspInit+0x40>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a22:	4a09      	ldr	r2, [pc, #36]	@ (8000a48 <HAL_TIM_Base_MspInit+0x40>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a2a:	4b07      	ldr	r3, [pc, #28]	@ (8000a48 <HAL_TIM_Base_MspInit+0x40>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a36:	bf00      	nop
 8000a38:	3714      	adds	r7, #20
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40010000 	.word	0x40010000
 8000a48:	40023800 	.word	0x40023800

08000a4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b088      	sub	sp, #32
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 030c 	add.w	r3, r7, #12
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a12      	ldr	r2, [pc, #72]	@ (8000ab4 <HAL_TIM_MspPostInit+0x68>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d11e      	bne.n	8000aac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	4b11      	ldr	r3, [pc, #68]	@ (8000ab8 <HAL_TIM_MspPostInit+0x6c>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	4a10      	ldr	r2, [pc, #64]	@ (8000ab8 <HAL_TIM_MspPostInit+0x6c>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab8 <HAL_TIM_MspPostInit+0x6c>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa0:	f107 030c 	add.w	r3, r7, #12
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4805      	ldr	r0, [pc, #20]	@ (8000abc <HAL_TIM_MspPostInit+0x70>)
 8000aa8:	f000 fa70 	bl	8000f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000aac:	bf00      	nop
 8000aae:	3720      	adds	r7, #32
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40010000 	.word	0x40010000
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020000 	.word	0x40020000

08000ac0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	@ 0x28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a19      	ldr	r2, [pc, #100]	@ (8000b44 <HAL_UART_MspInit+0x84>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d12b      	bne.n	8000b3a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	4b18      	ldr	r3, [pc, #96]	@ (8000b48 <HAL_UART_MspInit+0x88>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aea:	4a17      	ldr	r2, [pc, #92]	@ (8000b48 <HAL_UART_MspInit+0x88>)
 8000aec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000af0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000af2:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <HAL_UART_MspInit+0x88>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <HAL_UART_MspInit+0x88>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	4a10      	ldr	r2, [pc, #64]	@ (8000b48 <HAL_UART_MspInit+0x88>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <HAL_UART_MspInit+0x88>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b1a:	230c      	movs	r3, #12
 8000b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b26:	2303      	movs	r3, #3
 8000b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b2a:	2307      	movs	r3, #7
 8000b2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	4805      	ldr	r0, [pc, #20]	@ (8000b4c <HAL_UART_MspInit+0x8c>)
 8000b36:	f000 fa29 	bl	8000f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b3a:	bf00      	nop
 8000b3c:	3728      	adds	r7, #40	@ 0x28
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40004400 	.word	0x40004400
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020000 	.word	0x40020000

08000b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <NMI_Handler+0x4>

08000b58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <HardFault_Handler+0x4>

08000b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <MemManage_Handler+0x4>

08000b68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <BusFault_Handler+0x4>

08000b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <UsageFault_Handler+0x4>

08000b78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba6:	f000 f8c7 	bl	8000d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb8:	4a14      	ldr	r2, [pc, #80]	@ (8000c0c <_sbrk+0x5c>)
 8000bba:	4b15      	ldr	r3, [pc, #84]	@ (8000c10 <_sbrk+0x60>)
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc4:	4b13      	ldr	r3, [pc, #76]	@ (8000c14 <_sbrk+0x64>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d102      	bne.n	8000bd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bcc:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <_sbrk+0x64>)
 8000bce:	4a12      	ldr	r2, [pc, #72]	@ (8000c18 <_sbrk+0x68>)
 8000bd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bd2:	4b10      	ldr	r3, [pc, #64]	@ (8000c14 <_sbrk+0x64>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d207      	bcs.n	8000bf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be0:	f002 fad0 	bl	8003184 <__errno>
 8000be4:	4603      	mov	r3, r0
 8000be6:	220c      	movs	r2, #12
 8000be8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bea:	f04f 33ff 	mov.w	r3, #4294967295
 8000bee:	e009      	b.n	8000c04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf0:	4b08      	ldr	r3, [pc, #32]	@ (8000c14 <_sbrk+0x64>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bf6:	4b07      	ldr	r3, [pc, #28]	@ (8000c14 <_sbrk+0x64>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	4a05      	ldr	r2, [pc, #20]	@ (8000c14 <_sbrk+0x64>)
 8000c00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c02:	68fb      	ldr	r3, [r7, #12]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3718      	adds	r7, #24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20020000 	.word	0x20020000
 8000c10:	00000400 	.word	0x00000400
 8000c14:	20000134 	.word	0x20000134
 8000c18:	20000288 	.word	0x20000288

08000c1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c20:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <SystemInit+0x20>)
 8000c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c26:	4a05      	ldr	r2, [pc, #20]	@ (8000c3c <SystemInit+0x20>)
 8000c28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c78 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c44:	f7ff ffea 	bl	8000c1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c48:	480c      	ldr	r0, [pc, #48]	@ (8000c7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c4a:	490d      	ldr	r1, [pc, #52]	@ (8000c80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c50:	e002      	b.n	8000c58 <LoopCopyDataInit>

08000c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c56:	3304      	adds	r3, #4

08000c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c5c:	d3f9      	bcc.n	8000c52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c60:	4c0a      	ldr	r4, [pc, #40]	@ (8000c8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c64:	e001      	b.n	8000c6a <LoopFillZerobss>

08000c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c68:	3204      	adds	r2, #4

08000c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c6c:	d3fb      	bcc.n	8000c66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c6e:	f002 fa8f 	bl	8003190 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c72:	f7ff fc85 	bl	8000580 <main>
  bx  lr    
 8000c76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c80:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c84:	08003afc 	.word	0x08003afc
  ldr r2, =_sbss
 8000c88:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c8c:	20000284 	.word	0x20000284

08000c90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c90:	e7fe      	b.n	8000c90 <ADC_IRQHandler>
	...

08000c94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c98:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd4 <HAL_Init+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd4 <HAL_Init+0x40>)
 8000c9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ca2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd4 <HAL_Init+0x40>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd4 <HAL_Init+0x40>)
 8000caa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb0:	4b08      	ldr	r3, [pc, #32]	@ (8000cd4 <HAL_Init+0x40>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a07      	ldr	r2, [pc, #28]	@ (8000cd4 <HAL_Init+0x40>)
 8000cb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cbc:	2003      	movs	r0, #3
 8000cbe:	f000 f931 	bl	8000f24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f000 f808 	bl	8000cd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc8:	f7ff fe76 	bl	80009b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40023c00 	.word	0x40023c00

08000cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce0:	4b12      	ldr	r3, [pc, #72]	@ (8000d2c <HAL_InitTick+0x54>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	4b12      	ldr	r3, [pc, #72]	@ (8000d30 <HAL_InitTick+0x58>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f000 f93b 	bl	8000f72 <HAL_SYSTICK_Config>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e00e      	b.n	8000d24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2b0f      	cmp	r3, #15
 8000d0a:	d80a      	bhi.n	8000d22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	6879      	ldr	r1, [r7, #4]
 8000d10:	f04f 30ff 	mov.w	r0, #4294967295
 8000d14:	f000 f911 	bl	8000f3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d18:	4a06      	ldr	r2, [pc, #24]	@ (8000d34 <HAL_InitTick+0x5c>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	e000      	b.n	8000d24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	20000008 	.word	0x20000008
 8000d34:	20000004 	.word	0x20000004

08000d38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d3c:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <HAL_IncTick+0x20>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	461a      	mov	r2, r3
 8000d42:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <HAL_IncTick+0x24>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4413      	add	r3, r2
 8000d48:	4a04      	ldr	r2, [pc, #16]	@ (8000d5c <HAL_IncTick+0x24>)
 8000d4a:	6013      	str	r3, [r2, #0]
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	20000008 	.word	0x20000008
 8000d5c:	20000138 	.word	0x20000138

08000d60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return uwTick;
 8000d64:	4b03      	ldr	r3, [pc, #12]	@ (8000d74 <HAL_GetTick+0x14>)
 8000d66:	681b      	ldr	r3, [r3, #0]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	20000138 	.word	0x20000138

08000d78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d80:	f7ff ffee 	bl	8000d60 <HAL_GetTick>
 8000d84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d90:	d005      	beq.n	8000d9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d92:	4b0a      	ldr	r3, [pc, #40]	@ (8000dbc <HAL_Delay+0x44>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	461a      	mov	r2, r3
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d9e:	bf00      	nop
 8000da0:	f7ff ffde 	bl	8000d60 <HAL_GetTick>
 8000da4:	4602      	mov	r2, r0
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d8f7      	bhi.n	8000da0 <HAL_Delay+0x28>
  {
  }
}
 8000db0:	bf00      	nop
 8000db2:	bf00      	nop
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000008 	.word	0x20000008

08000dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e04 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd6:	68ba      	ldr	r2, [r7, #8]
 8000dd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ddc:	4013      	ands	r3, r2
 8000dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df2:	4a04      	ldr	r2, [pc, #16]	@ (8000e04 <__NVIC_SetPriorityGrouping+0x44>)
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	60d3      	str	r3, [r2, #12]
}
 8000df8:	bf00      	nop
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e0c:	4b04      	ldr	r3, [pc, #16]	@ (8000e20 <__NVIC_GetPriorityGrouping+0x18>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	0a1b      	lsrs	r3, r3, #8
 8000e12:	f003 0307 	and.w	r3, r3, #7
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	6039      	str	r1, [r7, #0]
 8000e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	db0a      	blt.n	8000e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	490c      	ldr	r1, [pc, #48]	@ (8000e70 <__NVIC_SetPriority+0x4c>)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	0112      	lsls	r2, r2, #4
 8000e44:	b2d2      	uxtb	r2, r2
 8000e46:	440b      	add	r3, r1
 8000e48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e4c:	e00a      	b.n	8000e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	4908      	ldr	r1, [pc, #32]	@ (8000e74 <__NVIC_SetPriority+0x50>)
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	f003 030f 	and.w	r3, r3, #15
 8000e5a:	3b04      	subs	r3, #4
 8000e5c:	0112      	lsls	r2, r2, #4
 8000e5e:	b2d2      	uxtb	r2, r2
 8000e60:	440b      	add	r3, r1
 8000e62:	761a      	strb	r2, [r3, #24]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000e100 	.word	0xe000e100
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b089      	sub	sp, #36	@ 0x24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	f1c3 0307 	rsb	r3, r3, #7
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	bf28      	it	cs
 8000e96:	2304      	movcs	r3, #4
 8000e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	2b06      	cmp	r3, #6
 8000ea0:	d902      	bls.n	8000ea8 <NVIC_EncodePriority+0x30>
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3b03      	subs	r3, #3
 8000ea6:	e000      	b.n	8000eaa <NVIC_EncodePriority+0x32>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43da      	mvns	r2, r3
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	401a      	ands	r2, r3
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eca:	43d9      	mvns	r1, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed0:	4313      	orrs	r3, r2
         );
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3724      	adds	r7, #36	@ 0x24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
	...

08000ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ef0:	d301      	bcc.n	8000ef6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e00f      	b.n	8000f16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f20 <SysTick_Config+0x40>)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000efe:	210f      	movs	r1, #15
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f7ff ff8e 	bl	8000e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f08:	4b05      	ldr	r3, [pc, #20]	@ (8000f20 <SysTick_Config+0x40>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f0e:	4b04      	ldr	r3, [pc, #16]	@ (8000f20 <SysTick_Config+0x40>)
 8000f10:	2207      	movs	r2, #7
 8000f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	e000e010 	.word	0xe000e010

08000f24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff ff47 	bl	8000dc0 <__NVIC_SetPriorityGrouping>
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b086      	sub	sp, #24
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	4603      	mov	r3, r0
 8000f42:	60b9      	str	r1, [r7, #8]
 8000f44:	607a      	str	r2, [r7, #4]
 8000f46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f4c:	f7ff ff5c 	bl	8000e08 <__NVIC_GetPriorityGrouping>
 8000f50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	68b9      	ldr	r1, [r7, #8]
 8000f56:	6978      	ldr	r0, [r7, #20]
 8000f58:	f7ff ff8e 	bl	8000e78 <NVIC_EncodePriority>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f62:	4611      	mov	r1, r2
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ff5d 	bl	8000e24 <__NVIC_SetPriority>
}
 8000f6a:	bf00      	nop
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff ffb0 	bl	8000ee0 <SysTick_Config>
 8000f80:	4603      	mov	r3, r0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b089      	sub	sp, #36	@ 0x24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
 8000fa6:	e159      	b.n	800125c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fa8:	2201      	movs	r2, #1
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	697a      	ldr	r2, [r7, #20]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	f040 8148 	bne.w	8001256 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 0303 	and.w	r3, r3, #3
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d005      	beq.n	8000fde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d130      	bne.n	8001040 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	2203      	movs	r2, #3
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	68da      	ldr	r2, [r3, #12]
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001014:	2201      	movs	r2, #1
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	091b      	lsrs	r3, r3, #4
 800102a:	f003 0201 	and.w	r2, r3, #1
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	2b03      	cmp	r3, #3
 800104a:	d017      	beq.n	800107c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	2203      	movs	r2, #3
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	689a      	ldr	r2, [r3, #8]
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 0303 	and.w	r3, r3, #3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d123      	bne.n	80010d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	08da      	lsrs	r2, r3, #3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3208      	adds	r2, #8
 8001090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001094:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	f003 0307 	and.w	r3, r3, #7
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	220f      	movs	r2, #15
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	691a      	ldr	r2, [r3, #16]
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	08da      	lsrs	r2, r3, #3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3208      	adds	r2, #8
 80010ca:	69b9      	ldr	r1, [r7, #24]
 80010cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	2203      	movs	r2, #3
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 0203 	and.w	r2, r3, #3
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800110c:	2b00      	cmp	r3, #0
 800110e:	f000 80a2 	beq.w	8001256 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	4b57      	ldr	r3, [pc, #348]	@ (8001274 <HAL_GPIO_Init+0x2e8>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111a:	4a56      	ldr	r2, [pc, #344]	@ (8001274 <HAL_GPIO_Init+0x2e8>)
 800111c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001120:	6453      	str	r3, [r2, #68]	@ 0x44
 8001122:	4b54      	ldr	r3, [pc, #336]	@ (8001274 <HAL_GPIO_Init+0x2e8>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001126:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800112e:	4a52      	ldr	r2, [pc, #328]	@ (8001278 <HAL_GPIO_Init+0x2ec>)
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	089b      	lsrs	r3, r3, #2
 8001134:	3302      	adds	r3, #2
 8001136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	f003 0303 	and.w	r3, r3, #3
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	220f      	movs	r2, #15
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a49      	ldr	r2, [pc, #292]	@ (800127c <HAL_GPIO_Init+0x2f0>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d019      	beq.n	800118e <HAL_GPIO_Init+0x202>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a48      	ldr	r2, [pc, #288]	@ (8001280 <HAL_GPIO_Init+0x2f4>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d013      	beq.n	800118a <HAL_GPIO_Init+0x1fe>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a47      	ldr	r2, [pc, #284]	@ (8001284 <HAL_GPIO_Init+0x2f8>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d00d      	beq.n	8001186 <HAL_GPIO_Init+0x1fa>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a46      	ldr	r2, [pc, #280]	@ (8001288 <HAL_GPIO_Init+0x2fc>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d007      	beq.n	8001182 <HAL_GPIO_Init+0x1f6>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a45      	ldr	r2, [pc, #276]	@ (800128c <HAL_GPIO_Init+0x300>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d101      	bne.n	800117e <HAL_GPIO_Init+0x1f2>
 800117a:	2304      	movs	r3, #4
 800117c:	e008      	b.n	8001190 <HAL_GPIO_Init+0x204>
 800117e:	2307      	movs	r3, #7
 8001180:	e006      	b.n	8001190 <HAL_GPIO_Init+0x204>
 8001182:	2303      	movs	r3, #3
 8001184:	e004      	b.n	8001190 <HAL_GPIO_Init+0x204>
 8001186:	2302      	movs	r3, #2
 8001188:	e002      	b.n	8001190 <HAL_GPIO_Init+0x204>
 800118a:	2301      	movs	r3, #1
 800118c:	e000      	b.n	8001190 <HAL_GPIO_Init+0x204>
 800118e:	2300      	movs	r3, #0
 8001190:	69fa      	ldr	r2, [r7, #28]
 8001192:	f002 0203 	and.w	r2, r2, #3
 8001196:	0092      	lsls	r2, r2, #2
 8001198:	4093      	lsls	r3, r2
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011a0:	4935      	ldr	r1, [pc, #212]	@ (8001278 <HAL_GPIO_Init+0x2ec>)
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	089b      	lsrs	r3, r3, #2
 80011a6:	3302      	adds	r3, #2
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ae:	4b38      	ldr	r3, [pc, #224]	@ (8001290 <HAL_GPIO_Init+0x304>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011d2:	4a2f      	ldr	r2, [pc, #188]	@ (8001290 <HAL_GPIO_Init+0x304>)
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001290 <HAL_GPIO_Init+0x304>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011fc:	4a24      	ldr	r2, [pc, #144]	@ (8001290 <HAL_GPIO_Init+0x304>)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001202:	4b23      	ldr	r3, [pc, #140]	@ (8001290 <HAL_GPIO_Init+0x304>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001226:	4a1a      	ldr	r2, [pc, #104]	@ (8001290 <HAL_GPIO_Init+0x304>)
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800122c:	4b18      	ldr	r3, [pc, #96]	@ (8001290 <HAL_GPIO_Init+0x304>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001250:	4a0f      	ldr	r2, [pc, #60]	@ (8001290 <HAL_GPIO_Init+0x304>)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3301      	adds	r3, #1
 800125a:	61fb      	str	r3, [r7, #28]
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	2b0f      	cmp	r3, #15
 8001260:	f67f aea2 	bls.w	8000fa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001264:	bf00      	nop
 8001266:	bf00      	nop
 8001268:	3724      	adds	r7, #36	@ 0x24
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800
 8001278:	40013800 	.word	0x40013800
 800127c:	40020000 	.word	0x40020000
 8001280:	40020400 	.word	0x40020400
 8001284:	40020800 	.word	0x40020800
 8001288:	40020c00 	.word	0x40020c00
 800128c:	40021000 	.word	0x40021000
 8001290:	40013c00 	.word	0x40013c00

08001294 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	691a      	ldr	r2, [r3, #16]
 80012a4:	887b      	ldrh	r3, [r7, #2]
 80012a6:	4013      	ands	r3, r2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d002      	beq.n	80012b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012ac:	2301      	movs	r3, #1
 80012ae:	73fb      	strb	r3, [r7, #15]
 80012b0:	e001      	b.n	80012b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012b2:	2300      	movs	r3, #0
 80012b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	807b      	strh	r3, [r7, #2]
 80012d0:	4613      	mov	r3, r2
 80012d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012d4:	787b      	ldrb	r3, [r7, #1]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012da:	887a      	ldrh	r2, [r7, #2]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012e0:	e003      	b.n	80012ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012e2:	887b      	ldrh	r3, [r7, #2]
 80012e4:	041a      	lsls	r2, r3, #16
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	619a      	str	r2, [r3, #24]
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d101      	bne.n	800130a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e267      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	2b00      	cmp	r3, #0
 8001314:	d075      	beq.n	8001402 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001316:	4b88      	ldr	r3, [pc, #544]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f003 030c 	and.w	r3, r3, #12
 800131e:	2b04      	cmp	r3, #4
 8001320:	d00c      	beq.n	800133c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001322:	4b85      	ldr	r3, [pc, #532]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800132a:	2b08      	cmp	r3, #8
 800132c:	d112      	bne.n	8001354 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800132e:	4b82      	ldr	r3, [pc, #520]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001336:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800133a:	d10b      	bne.n	8001354 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133c:	4b7e      	ldr	r3, [pc, #504]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d05b      	beq.n	8001400 <HAL_RCC_OscConfig+0x108>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d157      	bne.n	8001400 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e242      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800135c:	d106      	bne.n	800136c <HAL_RCC_OscConfig+0x74>
 800135e:	4b76      	ldr	r3, [pc, #472]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a75      	ldr	r2, [pc, #468]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 8001364:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	e01d      	b.n	80013a8 <HAL_RCC_OscConfig+0xb0>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001374:	d10c      	bne.n	8001390 <HAL_RCC_OscConfig+0x98>
 8001376:	4b70      	ldr	r3, [pc, #448]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a6f      	ldr	r2, [pc, #444]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 800137c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	4b6d      	ldr	r3, [pc, #436]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a6c      	ldr	r2, [pc, #432]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 8001388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	e00b      	b.n	80013a8 <HAL_RCC_OscConfig+0xb0>
 8001390:	4b69      	ldr	r3, [pc, #420]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a68      	ldr	r2, [pc, #416]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 8001396:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	4b66      	ldr	r3, [pc, #408]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a65      	ldr	r2, [pc, #404]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 80013a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d013      	beq.n	80013d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b0:	f7ff fcd6 	bl	8000d60 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013b8:	f7ff fcd2 	bl	8000d60 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b64      	cmp	r3, #100	@ 0x64
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e207      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ca:	4b5b      	ldr	r3, [pc, #364]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0f0      	beq.n	80013b8 <HAL_RCC_OscConfig+0xc0>
 80013d6:	e014      	b.n	8001402 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d8:	f7ff fcc2 	bl	8000d60 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013e0:	f7ff fcbe 	bl	8000d60 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b64      	cmp	r3, #100	@ 0x64
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e1f3      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013f2:	4b51      	ldr	r3, [pc, #324]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f0      	bne.n	80013e0 <HAL_RCC_OscConfig+0xe8>
 80013fe:	e000      	b.n	8001402 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d063      	beq.n	80014d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800140e:	4b4a      	ldr	r3, [pc, #296]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 030c 	and.w	r3, r3, #12
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00b      	beq.n	8001432 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800141a:	4b47      	ldr	r3, [pc, #284]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001422:	2b08      	cmp	r3, #8
 8001424:	d11c      	bne.n	8001460 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001426:	4b44      	ldr	r3, [pc, #272]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d116      	bne.n	8001460 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001432:	4b41      	ldr	r3, [pc, #260]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d005      	beq.n	800144a <HAL_RCC_OscConfig+0x152>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d001      	beq.n	800144a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e1c7      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800144a:	4b3b      	ldr	r3, [pc, #236]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	4937      	ldr	r1, [pc, #220]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 800145a:	4313      	orrs	r3, r2
 800145c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800145e:	e03a      	b.n	80014d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d020      	beq.n	80014aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001468:	4b34      	ldr	r3, [pc, #208]	@ (800153c <HAL_RCC_OscConfig+0x244>)
 800146a:	2201      	movs	r2, #1
 800146c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146e:	f7ff fc77 	bl	8000d60 <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001476:	f7ff fc73 	bl	8000d60 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e1a8      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001488:	4b2b      	ldr	r3, [pc, #172]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d0f0      	beq.n	8001476 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001494:	4b28      	ldr	r3, [pc, #160]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	4925      	ldr	r1, [pc, #148]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	600b      	str	r3, [r1, #0]
 80014a8:	e015      	b.n	80014d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014aa:	4b24      	ldr	r3, [pc, #144]	@ (800153c <HAL_RCC_OscConfig+0x244>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b0:	f7ff fc56 	bl	8000d60 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b8:	f7ff fc52 	bl	8000d60 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e187      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d036      	beq.n	8001550 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d016      	beq.n	8001518 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ea:	4b15      	ldr	r3, [pc, #84]	@ (8001540 <HAL_RCC_OscConfig+0x248>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f0:	f7ff fc36 	bl	8000d60 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014f8:	f7ff fc32 	bl	8000d60 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e167      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800150a:	4b0b      	ldr	r3, [pc, #44]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 800150c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0f0      	beq.n	80014f8 <HAL_RCC_OscConfig+0x200>
 8001516:	e01b      	b.n	8001550 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001518:	4b09      	ldr	r3, [pc, #36]	@ (8001540 <HAL_RCC_OscConfig+0x248>)
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800151e:	f7ff fc1f 	bl	8000d60 <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001524:	e00e      	b.n	8001544 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001526:	f7ff fc1b 	bl	8000d60 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d907      	bls.n	8001544 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e150      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
 8001538:	40023800 	.word	0x40023800
 800153c:	42470000 	.word	0x42470000
 8001540:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001544:	4b88      	ldr	r3, [pc, #544]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 8001546:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1ea      	bne.n	8001526 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 8097 	beq.w	800168c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800155e:	2300      	movs	r3, #0
 8001560:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001562:	4b81      	ldr	r3, [pc, #516]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10f      	bne.n	800158e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	4b7d      	ldr	r3, [pc, #500]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001576:	4a7c      	ldr	r2, [pc, #496]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 8001578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800157c:	6413      	str	r3, [r2, #64]	@ 0x40
 800157e:	4b7a      	ldr	r3, [pc, #488]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800158a:	2301      	movs	r3, #1
 800158c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158e:	4b77      	ldr	r3, [pc, #476]	@ (800176c <HAL_RCC_OscConfig+0x474>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001596:	2b00      	cmp	r3, #0
 8001598:	d118      	bne.n	80015cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800159a:	4b74      	ldr	r3, [pc, #464]	@ (800176c <HAL_RCC_OscConfig+0x474>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a73      	ldr	r2, [pc, #460]	@ (800176c <HAL_RCC_OscConfig+0x474>)
 80015a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015a6:	f7ff fbdb 	bl	8000d60 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ae:	f7ff fbd7 	bl	8000d60 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e10c      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c0:	4b6a      	ldr	r3, [pc, #424]	@ (800176c <HAL_RCC_OscConfig+0x474>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0f0      	beq.n	80015ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d106      	bne.n	80015e2 <HAL_RCC_OscConfig+0x2ea>
 80015d4:	4b64      	ldr	r3, [pc, #400]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 80015d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015d8:	4a63      	ldr	r2, [pc, #396]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	6713      	str	r3, [r2, #112]	@ 0x70
 80015e0:	e01c      	b.n	800161c <HAL_RCC_OscConfig+0x324>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	2b05      	cmp	r3, #5
 80015e8:	d10c      	bne.n	8001604 <HAL_RCC_OscConfig+0x30c>
 80015ea:	4b5f      	ldr	r3, [pc, #380]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 80015ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ee:	4a5e      	ldr	r2, [pc, #376]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 80015f0:	f043 0304 	orr.w	r3, r3, #4
 80015f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80015f6:	4b5c      	ldr	r3, [pc, #368]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 80015f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015fa:	4a5b      	ldr	r2, [pc, #364]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6713      	str	r3, [r2, #112]	@ 0x70
 8001602:	e00b      	b.n	800161c <HAL_RCC_OscConfig+0x324>
 8001604:	4b58      	ldr	r3, [pc, #352]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 8001606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001608:	4a57      	ldr	r2, [pc, #348]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 800160a:	f023 0301 	bic.w	r3, r3, #1
 800160e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001610:	4b55      	ldr	r3, [pc, #340]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 8001612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001614:	4a54      	ldr	r2, [pc, #336]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 8001616:	f023 0304 	bic.w	r3, r3, #4
 800161a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d015      	beq.n	8001650 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001624:	f7ff fb9c 	bl	8000d60 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800162a:	e00a      	b.n	8001642 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800162c:	f7ff fb98 	bl	8000d60 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	f241 3288 	movw	r2, #5000	@ 0x1388
 800163a:	4293      	cmp	r3, r2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e0cb      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001642:	4b49      	ldr	r3, [pc, #292]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 8001644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0ee      	beq.n	800162c <HAL_RCC_OscConfig+0x334>
 800164e:	e014      	b.n	800167a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001650:	f7ff fb86 	bl	8000d60 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001656:	e00a      	b.n	800166e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001658:	f7ff fb82 	bl	8000d60 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001666:	4293      	cmp	r3, r2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e0b5      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800166e:	4b3e      	ldr	r3, [pc, #248]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 8001670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1ee      	bne.n	8001658 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800167a:	7dfb      	ldrb	r3, [r7, #23]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d105      	bne.n	800168c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001680:	4b39      	ldr	r3, [pc, #228]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 8001682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001684:	4a38      	ldr	r2, [pc, #224]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 8001686:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800168a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 80a1 	beq.w	80017d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001696:	4b34      	ldr	r3, [pc, #208]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	2b08      	cmp	r3, #8
 80016a0:	d05c      	beq.n	800175c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d141      	bne.n	800172e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016aa:	4b31      	ldr	r3, [pc, #196]	@ (8001770 <HAL_RCC_OscConfig+0x478>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b0:	f7ff fb56 	bl	8000d60 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b8:	f7ff fb52 	bl	8000d60 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e087      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ca:	4b27      	ldr	r3, [pc, #156]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1f0      	bne.n	80016b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69da      	ldr	r2, [r3, #28]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	431a      	orrs	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e4:	019b      	lsls	r3, r3, #6
 80016e6:	431a      	orrs	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ec:	085b      	lsrs	r3, r3, #1
 80016ee:	3b01      	subs	r3, #1
 80016f0:	041b      	lsls	r3, r3, #16
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016f8:	061b      	lsls	r3, r3, #24
 80016fa:	491b      	ldr	r1, [pc, #108]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001700:	4b1b      	ldr	r3, [pc, #108]	@ (8001770 <HAL_RCC_OscConfig+0x478>)
 8001702:	2201      	movs	r2, #1
 8001704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001706:	f7ff fb2b 	bl	8000d60 <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800170e:	f7ff fb27 	bl	8000d60 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e05c      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001720:	4b11      	ldr	r3, [pc, #68]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0f0      	beq.n	800170e <HAL_RCC_OscConfig+0x416>
 800172c:	e054      	b.n	80017d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800172e:	4b10      	ldr	r3, [pc, #64]	@ (8001770 <HAL_RCC_OscConfig+0x478>)
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001734:	f7ff fb14 	bl	8000d60 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800173c:	f7ff fb10 	bl	8000d60 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e045      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800174e:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1f0      	bne.n	800173c <HAL_RCC_OscConfig+0x444>
 800175a:	e03d      	b.n	80017d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d107      	bne.n	8001774 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e038      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
 8001768:	40023800 	.word	0x40023800
 800176c:	40007000 	.word	0x40007000
 8001770:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001774:	4b1b      	ldr	r3, [pc, #108]	@ (80017e4 <HAL_RCC_OscConfig+0x4ec>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d028      	beq.n	80017d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800178c:	429a      	cmp	r2, r3
 800178e:	d121      	bne.n	80017d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800179a:	429a      	cmp	r2, r3
 800179c:	d11a      	bne.n	80017d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80017a4:	4013      	ands	r3, r2
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80017aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d111      	bne.n	80017d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ba:	085b      	lsrs	r3, r3, #1
 80017bc:	3b01      	subs	r3, #1
 80017be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d107      	bne.n	80017d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d001      	beq.n	80017d8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e000      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800

080017e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e0cc      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017fc:	4b68      	ldr	r3, [pc, #416]	@ (80019a0 <HAL_RCC_ClockConfig+0x1b8>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	429a      	cmp	r2, r3
 8001808:	d90c      	bls.n	8001824 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180a:	4b65      	ldr	r3, [pc, #404]	@ (80019a0 <HAL_RCC_ClockConfig+0x1b8>)
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001812:	4b63      	ldr	r3, [pc, #396]	@ (80019a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d001      	beq.n	8001824 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e0b8      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d020      	beq.n	8001872 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b00      	cmp	r3, #0
 800183a:	d005      	beq.n	8001848 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800183c:	4b59      	ldr	r3, [pc, #356]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	4a58      	ldr	r2, [pc, #352]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001846:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0308 	and.w	r3, r3, #8
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001854:	4b53      	ldr	r3, [pc, #332]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	4a52      	ldr	r2, [pc, #328]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800185e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001860:	4b50      	ldr	r3, [pc, #320]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	494d      	ldr	r1, [pc, #308]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	4313      	orrs	r3, r2
 8001870:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	d044      	beq.n	8001908 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d107      	bne.n	8001896 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001886:	4b47      	ldr	r3, [pc, #284]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d119      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e07f      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b02      	cmp	r3, #2
 800189c:	d003      	beq.n	80018a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018a2:	2b03      	cmp	r3, #3
 80018a4:	d107      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a6:	4b3f      	ldr	r3, [pc, #252]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d109      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e06f      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b6:	4b3b      	ldr	r3, [pc, #236]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e067      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018c6:	4b37      	ldr	r3, [pc, #220]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f023 0203 	bic.w	r2, r3, #3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	4934      	ldr	r1, [pc, #208]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018d8:	f7ff fa42 	bl	8000d60 <HAL_GetTick>
 80018dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018de:	e00a      	b.n	80018f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e0:	f7ff fa3e 	bl	8000d60 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e04f      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f6:	4b2b      	ldr	r3, [pc, #172]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 020c 	and.w	r2, r3, #12
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	429a      	cmp	r2, r3
 8001906:	d1eb      	bne.n	80018e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001908:	4b25      	ldr	r3, [pc, #148]	@ (80019a0 <HAL_RCC_ClockConfig+0x1b8>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d20c      	bcs.n	8001930 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001916:	4b22      	ldr	r3, [pc, #136]	@ (80019a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800191e:	4b20      	ldr	r3, [pc, #128]	@ (80019a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	d001      	beq.n	8001930 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e032      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	d008      	beq.n	800194e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800193c:	4b19      	ldr	r3, [pc, #100]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	4916      	ldr	r1, [pc, #88]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	4313      	orrs	r3, r2
 800194c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	2b00      	cmp	r3, #0
 8001958:	d009      	beq.n	800196e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800195a:	4b12      	ldr	r3, [pc, #72]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	490e      	ldr	r1, [pc, #56]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	4313      	orrs	r3, r2
 800196c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800196e:	f000 f821 	bl	80019b4 <HAL_RCC_GetSysClockFreq>
 8001972:	4602      	mov	r2, r0
 8001974:	4b0b      	ldr	r3, [pc, #44]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	091b      	lsrs	r3, r3, #4
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	490a      	ldr	r1, [pc, #40]	@ (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001980:	5ccb      	ldrb	r3, [r1, r3]
 8001982:	fa22 f303 	lsr.w	r3, r2, r3
 8001986:	4a09      	ldr	r2, [pc, #36]	@ (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 8001988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800198a:	4b09      	ldr	r3, [pc, #36]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff f9a2 	bl	8000cd8 <HAL_InitTick>

  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023c00 	.word	0x40023c00
 80019a4:	40023800 	.word	0x40023800
 80019a8:	08003aa0 	.word	0x08003aa0
 80019ac:	20000000 	.word	0x20000000
 80019b0:	20000004 	.word	0x20000004

080019b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019b8:	b094      	sub	sp, #80	@ 0x50
 80019ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019cc:	4b79      	ldr	r3, [pc, #484]	@ (8001bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 030c 	and.w	r3, r3, #12
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	d00d      	beq.n	80019f4 <HAL_RCC_GetSysClockFreq+0x40>
 80019d8:	2b08      	cmp	r3, #8
 80019da:	f200 80e1 	bhi.w	8001ba0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d002      	beq.n	80019e8 <HAL_RCC_GetSysClockFreq+0x34>
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	d003      	beq.n	80019ee <HAL_RCC_GetSysClockFreq+0x3a>
 80019e6:	e0db      	b.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019e8:	4b73      	ldr	r3, [pc, #460]	@ (8001bb8 <HAL_RCC_GetSysClockFreq+0x204>)
 80019ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019ec:	e0db      	b.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ee:	4b73      	ldr	r3, [pc, #460]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0x208>)
 80019f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019f2:	e0d8      	b.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019f4:	4b6f      	ldr	r3, [pc, #444]	@ (8001bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019fc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019fe:	4b6d      	ldr	r3, [pc, #436]	@ (8001bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d063      	beq.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a0a:	4b6a      	ldr	r3, [pc, #424]	@ (8001bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	099b      	lsrs	r3, r3, #6
 8001a10:	2200      	movs	r2, #0
 8001a12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001a14:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a1e:	2300      	movs	r3, #0
 8001a20:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001a26:	4622      	mov	r2, r4
 8001a28:	462b      	mov	r3, r5
 8001a2a:	f04f 0000 	mov.w	r0, #0
 8001a2e:	f04f 0100 	mov.w	r1, #0
 8001a32:	0159      	lsls	r1, r3, #5
 8001a34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a38:	0150      	lsls	r0, r2, #5
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	4621      	mov	r1, r4
 8001a40:	1a51      	subs	r1, r2, r1
 8001a42:	6139      	str	r1, [r7, #16]
 8001a44:	4629      	mov	r1, r5
 8001a46:	eb63 0301 	sbc.w	r3, r3, r1
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	f04f 0300 	mov.w	r3, #0
 8001a54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a58:	4659      	mov	r1, fp
 8001a5a:	018b      	lsls	r3, r1, #6
 8001a5c:	4651      	mov	r1, sl
 8001a5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a62:	4651      	mov	r1, sl
 8001a64:	018a      	lsls	r2, r1, #6
 8001a66:	4651      	mov	r1, sl
 8001a68:	ebb2 0801 	subs.w	r8, r2, r1
 8001a6c:	4659      	mov	r1, fp
 8001a6e:	eb63 0901 	sbc.w	r9, r3, r1
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a86:	4690      	mov	r8, r2
 8001a88:	4699      	mov	r9, r3
 8001a8a:	4623      	mov	r3, r4
 8001a8c:	eb18 0303 	adds.w	r3, r8, r3
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	462b      	mov	r3, r5
 8001a94:	eb49 0303 	adc.w	r3, r9, r3
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	f04f 0300 	mov.w	r3, #0
 8001aa2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001aa6:	4629      	mov	r1, r5
 8001aa8:	024b      	lsls	r3, r1, #9
 8001aaa:	4621      	mov	r1, r4
 8001aac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ab0:	4621      	mov	r1, r4
 8001ab2:	024a      	lsls	r2, r1, #9
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001aba:	2200      	movs	r2, #0
 8001abc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001abe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ac0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ac4:	f7fe fbe4 	bl	8000290 <__aeabi_uldivmod>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4613      	mov	r3, r2
 8001ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ad0:	e058      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ad2:	4b38      	ldr	r3, [pc, #224]	@ (8001bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	099b      	lsrs	r3, r3, #6
 8001ad8:	2200      	movs	r2, #0
 8001ada:	4618      	mov	r0, r3
 8001adc:	4611      	mov	r1, r2
 8001ade:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ae2:	623b      	str	r3, [r7, #32]
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ae8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001aec:	4642      	mov	r2, r8
 8001aee:	464b      	mov	r3, r9
 8001af0:	f04f 0000 	mov.w	r0, #0
 8001af4:	f04f 0100 	mov.w	r1, #0
 8001af8:	0159      	lsls	r1, r3, #5
 8001afa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001afe:	0150      	lsls	r0, r2, #5
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4641      	mov	r1, r8
 8001b06:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b0a:	4649      	mov	r1, r9
 8001b0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b24:	ebb2 040a 	subs.w	r4, r2, sl
 8001b28:	eb63 050b 	sbc.w	r5, r3, fp
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	f04f 0300 	mov.w	r3, #0
 8001b34:	00eb      	lsls	r3, r5, #3
 8001b36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b3a:	00e2      	lsls	r2, r4, #3
 8001b3c:	4614      	mov	r4, r2
 8001b3e:	461d      	mov	r5, r3
 8001b40:	4643      	mov	r3, r8
 8001b42:	18e3      	adds	r3, r4, r3
 8001b44:	603b      	str	r3, [r7, #0]
 8001b46:	464b      	mov	r3, r9
 8001b48:	eb45 0303 	adc.w	r3, r5, r3
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b5a:	4629      	mov	r1, r5
 8001b5c:	028b      	lsls	r3, r1, #10
 8001b5e:	4621      	mov	r1, r4
 8001b60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b64:	4621      	mov	r1, r4
 8001b66:	028a      	lsls	r2, r1, #10
 8001b68:	4610      	mov	r0, r2
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b6e:	2200      	movs	r2, #0
 8001b70:	61bb      	str	r3, [r7, #24]
 8001b72:	61fa      	str	r2, [r7, #28]
 8001b74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b78:	f7fe fb8a 	bl	8000290 <__aeabi_uldivmod>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4613      	mov	r3, r2
 8001b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b84:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	0c1b      	lsrs	r3, r3, #16
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	3301      	adds	r3, #1
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001b94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b9e:	e002      	b.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ba0:	4b05      	ldr	r3, [pc, #20]	@ (8001bb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ba4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ba6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3750      	adds	r7, #80	@ 0x50
 8001bac:	46bd      	mov	sp, r7
 8001bae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	00f42400 	.word	0x00f42400
 8001bbc:	007a1200 	.word	0x007a1200

08001bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bc4:	4b03      	ldr	r3, [pc, #12]	@ (8001bd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	20000000 	.word	0x20000000

08001bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bdc:	f7ff fff0 	bl	8001bc0 <HAL_RCC_GetHCLKFreq>
 8001be0:	4602      	mov	r2, r0
 8001be2:	4b05      	ldr	r3, [pc, #20]	@ (8001bf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	0a9b      	lsrs	r3, r3, #10
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	4903      	ldr	r1, [pc, #12]	@ (8001bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bee:	5ccb      	ldrb	r3, [r1, r3]
 8001bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	08003ab0 	.word	0x08003ab0

08001c00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c04:	f7ff ffdc 	bl	8001bc0 <HAL_RCC_GetHCLKFreq>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	4b05      	ldr	r3, [pc, #20]	@ (8001c20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	0b5b      	lsrs	r3, r3, #13
 8001c10:	f003 0307 	and.w	r3, r3, #7
 8001c14:	4903      	ldr	r1, [pc, #12]	@ (8001c24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c16:	5ccb      	ldrb	r3, [r1, r3]
 8001c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40023800 	.word	0x40023800
 8001c24:	08003ab0 	.word	0x08003ab0

08001c28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e041      	b.n	8001cbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d106      	bne.n	8001c54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7fe feda 	bl	8000a08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2202      	movs	r2, #2
 8001c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3304      	adds	r3, #4
 8001c64:	4619      	mov	r1, r3
 8001c66:	4610      	mov	r0, r2
 8001c68:	f000 fac0 	bl	80021ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e041      	b.n	8001d5c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d106      	bne.n	8001cf2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f839 	bl	8001d64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3304      	adds	r3, #4
 8001d02:	4619      	mov	r1, r3
 8001d04:	4610      	mov	r0, r2
 8001d06:	f000 fa71 	bl	80021ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d109      	bne.n	8001d9c <HAL_TIM_PWM_Start+0x24>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	bf14      	ite	ne
 8001d94:	2301      	movne	r3, #1
 8001d96:	2300      	moveq	r3, #0
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	e022      	b.n	8001de2 <HAL_TIM_PWM_Start+0x6a>
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	d109      	bne.n	8001db6 <HAL_TIM_PWM_Start+0x3e>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	bf14      	ite	ne
 8001dae:	2301      	movne	r3, #1
 8001db0:	2300      	moveq	r3, #0
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	e015      	b.n	8001de2 <HAL_TIM_PWM_Start+0x6a>
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	2b08      	cmp	r3, #8
 8001dba:	d109      	bne.n	8001dd0 <HAL_TIM_PWM_Start+0x58>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	bf14      	ite	ne
 8001dc8:	2301      	movne	r3, #1
 8001dca:	2300      	moveq	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	e008      	b.n	8001de2 <HAL_TIM_PWM_Start+0x6a>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	bf14      	ite	ne
 8001ddc:	2301      	movne	r3, #1
 8001dde:	2300      	moveq	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e068      	b.n	8001ebc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d104      	bne.n	8001dfa <HAL_TIM_PWM_Start+0x82>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2202      	movs	r2, #2
 8001df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001df8:	e013      	b.n	8001e22 <HAL_TIM_PWM_Start+0xaa>
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	2b04      	cmp	r3, #4
 8001dfe:	d104      	bne.n	8001e0a <HAL_TIM_PWM_Start+0x92>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2202      	movs	r2, #2
 8001e04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e08:	e00b      	b.n	8001e22 <HAL_TIM_PWM_Start+0xaa>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	d104      	bne.n	8001e1a <HAL_TIM_PWM_Start+0xa2>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2202      	movs	r2, #2
 8001e14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e18:	e003      	b.n	8001e22 <HAL_TIM_PWM_Start+0xaa>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2201      	movs	r2, #1
 8001e28:	6839      	ldr	r1, [r7, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 fc90 	bl	8002750 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a23      	ldr	r2, [pc, #140]	@ (8001ec4 <HAL_TIM_PWM_Start+0x14c>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d107      	bne.n	8001e4a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e48:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ec4 <HAL_TIM_PWM_Start+0x14c>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d018      	beq.n	8001e86 <HAL_TIM_PWM_Start+0x10e>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e5c:	d013      	beq.n	8001e86 <HAL_TIM_PWM_Start+0x10e>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a19      	ldr	r2, [pc, #100]	@ (8001ec8 <HAL_TIM_PWM_Start+0x150>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d00e      	beq.n	8001e86 <HAL_TIM_PWM_Start+0x10e>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a17      	ldr	r2, [pc, #92]	@ (8001ecc <HAL_TIM_PWM_Start+0x154>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d009      	beq.n	8001e86 <HAL_TIM_PWM_Start+0x10e>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a16      	ldr	r2, [pc, #88]	@ (8001ed0 <HAL_TIM_PWM_Start+0x158>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d004      	beq.n	8001e86 <HAL_TIM_PWM_Start+0x10e>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a14      	ldr	r2, [pc, #80]	@ (8001ed4 <HAL_TIM_PWM_Start+0x15c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d111      	bne.n	8001eaa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2b06      	cmp	r3, #6
 8001e96:	d010      	beq.n	8001eba <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0201 	orr.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ea8:	e007      	b.n	8001eba <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 0201 	orr.w	r2, r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40010000 	.word	0x40010000
 8001ec8:	40000400 	.word	0x40000400
 8001ecc:	40000800 	.word	0x40000800
 8001ed0:	40000c00 	.word	0x40000c00
 8001ed4:	40014000 	.word	0x40014000

08001ed8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d101      	bne.n	8001ef6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	e0ae      	b.n	8002054 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b0c      	cmp	r3, #12
 8001f02:	f200 809f 	bhi.w	8002044 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001f06:	a201      	add	r2, pc, #4	@ (adr r2, 8001f0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f0c:	08001f41 	.word	0x08001f41
 8001f10:	08002045 	.word	0x08002045
 8001f14:	08002045 	.word	0x08002045
 8001f18:	08002045 	.word	0x08002045
 8001f1c:	08001f81 	.word	0x08001f81
 8001f20:	08002045 	.word	0x08002045
 8001f24:	08002045 	.word	0x08002045
 8001f28:	08002045 	.word	0x08002045
 8001f2c:	08001fc3 	.word	0x08001fc3
 8001f30:	08002045 	.word	0x08002045
 8001f34:	08002045 	.word	0x08002045
 8001f38:	08002045 	.word	0x08002045
 8001f3c:	08002003 	.word	0x08002003
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68b9      	ldr	r1, [r7, #8]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 f9dc 	bl	8002304 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	699a      	ldr	r2, [r3, #24]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0208 	orr.w	r2, r2, #8
 8001f5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	699a      	ldr	r2, [r3, #24]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0204 	bic.w	r2, r2, #4
 8001f6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6999      	ldr	r1, [r3, #24]
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	691a      	ldr	r2, [r3, #16]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	619a      	str	r2, [r3, #24]
      break;
 8001f7e:	e064      	b.n	800204a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68b9      	ldr	r1, [r7, #8]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 fa22 	bl	80023d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699a      	ldr	r2, [r3, #24]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	699a      	ldr	r2, [r3, #24]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001faa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6999      	ldr	r1, [r3, #24]
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	021a      	lsls	r2, r3, #8
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	619a      	str	r2, [r3, #24]
      break;
 8001fc0:	e043      	b.n	800204a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68b9      	ldr	r1, [r7, #8]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f000 fa6d 	bl	80024a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	69da      	ldr	r2, [r3, #28]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f042 0208 	orr.w	r2, r2, #8
 8001fdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	69da      	ldr	r2, [r3, #28]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 0204 	bic.w	r2, r2, #4
 8001fec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	69d9      	ldr	r1, [r3, #28]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	61da      	str	r2, [r3, #28]
      break;
 8002000:	e023      	b.n	800204a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68b9      	ldr	r1, [r7, #8]
 8002008:	4618      	mov	r0, r3
 800200a:	f000 fab7 	bl	800257c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	69da      	ldr	r2, [r3, #28]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800201c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	69da      	ldr	r2, [r3, #28]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800202c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	69d9      	ldr	r1, [r3, #28]
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	021a      	lsls	r2, r3, #8
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	430a      	orrs	r2, r1
 8002040:	61da      	str	r2, [r3, #28]
      break;
 8002042:	e002      	b.n	800204a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	75fb      	strb	r3, [r7, #23]
      break;
 8002048:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002052:	7dfb      	ldrb	r3, [r7, #23]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002066:	2300      	movs	r3, #0
 8002068:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002070:	2b01      	cmp	r3, #1
 8002072:	d101      	bne.n	8002078 <HAL_TIM_ConfigClockSource+0x1c>
 8002074:	2302      	movs	r3, #2
 8002076:	e0b4      	b.n	80021e2 <HAL_TIM_ConfigClockSource+0x186>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2202      	movs	r2, #2
 8002084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002096:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800209e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020b0:	d03e      	beq.n	8002130 <HAL_TIM_ConfigClockSource+0xd4>
 80020b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020b6:	f200 8087 	bhi.w	80021c8 <HAL_TIM_ConfigClockSource+0x16c>
 80020ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020be:	f000 8086 	beq.w	80021ce <HAL_TIM_ConfigClockSource+0x172>
 80020c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020c6:	d87f      	bhi.n	80021c8 <HAL_TIM_ConfigClockSource+0x16c>
 80020c8:	2b70      	cmp	r3, #112	@ 0x70
 80020ca:	d01a      	beq.n	8002102 <HAL_TIM_ConfigClockSource+0xa6>
 80020cc:	2b70      	cmp	r3, #112	@ 0x70
 80020ce:	d87b      	bhi.n	80021c8 <HAL_TIM_ConfigClockSource+0x16c>
 80020d0:	2b60      	cmp	r3, #96	@ 0x60
 80020d2:	d050      	beq.n	8002176 <HAL_TIM_ConfigClockSource+0x11a>
 80020d4:	2b60      	cmp	r3, #96	@ 0x60
 80020d6:	d877      	bhi.n	80021c8 <HAL_TIM_ConfigClockSource+0x16c>
 80020d8:	2b50      	cmp	r3, #80	@ 0x50
 80020da:	d03c      	beq.n	8002156 <HAL_TIM_ConfigClockSource+0xfa>
 80020dc:	2b50      	cmp	r3, #80	@ 0x50
 80020de:	d873      	bhi.n	80021c8 <HAL_TIM_ConfigClockSource+0x16c>
 80020e0:	2b40      	cmp	r3, #64	@ 0x40
 80020e2:	d058      	beq.n	8002196 <HAL_TIM_ConfigClockSource+0x13a>
 80020e4:	2b40      	cmp	r3, #64	@ 0x40
 80020e6:	d86f      	bhi.n	80021c8 <HAL_TIM_ConfigClockSource+0x16c>
 80020e8:	2b30      	cmp	r3, #48	@ 0x30
 80020ea:	d064      	beq.n	80021b6 <HAL_TIM_ConfigClockSource+0x15a>
 80020ec:	2b30      	cmp	r3, #48	@ 0x30
 80020ee:	d86b      	bhi.n	80021c8 <HAL_TIM_ConfigClockSource+0x16c>
 80020f0:	2b20      	cmp	r3, #32
 80020f2:	d060      	beq.n	80021b6 <HAL_TIM_ConfigClockSource+0x15a>
 80020f4:	2b20      	cmp	r3, #32
 80020f6:	d867      	bhi.n	80021c8 <HAL_TIM_ConfigClockSource+0x16c>
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d05c      	beq.n	80021b6 <HAL_TIM_ConfigClockSource+0x15a>
 80020fc:	2b10      	cmp	r3, #16
 80020fe:	d05a      	beq.n	80021b6 <HAL_TIM_ConfigClockSource+0x15a>
 8002100:	e062      	b.n	80021c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002112:	f000 fafd 	bl	8002710 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002124:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	609a      	str	r2, [r3, #8]
      break;
 800212e:	e04f      	b.n	80021d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002140:	f000 fae6 	bl	8002710 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002152:	609a      	str	r2, [r3, #8]
      break;
 8002154:	e03c      	b.n	80021d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002162:	461a      	mov	r2, r3
 8002164:	f000 fa5a 	bl	800261c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2150      	movs	r1, #80	@ 0x50
 800216e:	4618      	mov	r0, r3
 8002170:	f000 fab3 	bl	80026da <TIM_ITRx_SetConfig>
      break;
 8002174:	e02c      	b.n	80021d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002182:	461a      	mov	r2, r3
 8002184:	f000 fa79 	bl	800267a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2160      	movs	r1, #96	@ 0x60
 800218e:	4618      	mov	r0, r3
 8002190:	f000 faa3 	bl	80026da <TIM_ITRx_SetConfig>
      break;
 8002194:	e01c      	b.n	80021d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021a2:	461a      	mov	r2, r3
 80021a4:	f000 fa3a 	bl	800261c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2140      	movs	r1, #64	@ 0x40
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 fa93 	bl	80026da <TIM_ITRx_SetConfig>
      break;
 80021b4:	e00c      	b.n	80021d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4619      	mov	r1, r3
 80021c0:	4610      	mov	r0, r2
 80021c2:	f000 fa8a 	bl	80026da <TIM_ITRx_SetConfig>
      break;
 80021c6:	e003      	b.n	80021d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	73fb      	strb	r3, [r7, #15]
      break;
 80021cc:	e000      	b.n	80021d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80021ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
	...

080021ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a3a      	ldr	r2, [pc, #232]	@ (80022e8 <TIM_Base_SetConfig+0xfc>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d00f      	beq.n	8002224 <TIM_Base_SetConfig+0x38>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800220a:	d00b      	beq.n	8002224 <TIM_Base_SetConfig+0x38>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a37      	ldr	r2, [pc, #220]	@ (80022ec <TIM_Base_SetConfig+0x100>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d007      	beq.n	8002224 <TIM_Base_SetConfig+0x38>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a36      	ldr	r2, [pc, #216]	@ (80022f0 <TIM_Base_SetConfig+0x104>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d003      	beq.n	8002224 <TIM_Base_SetConfig+0x38>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a35      	ldr	r2, [pc, #212]	@ (80022f4 <TIM_Base_SetConfig+0x108>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d108      	bne.n	8002236 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800222a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	4313      	orrs	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a2b      	ldr	r2, [pc, #172]	@ (80022e8 <TIM_Base_SetConfig+0xfc>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d01b      	beq.n	8002276 <TIM_Base_SetConfig+0x8a>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002244:	d017      	beq.n	8002276 <TIM_Base_SetConfig+0x8a>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a28      	ldr	r2, [pc, #160]	@ (80022ec <TIM_Base_SetConfig+0x100>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d013      	beq.n	8002276 <TIM_Base_SetConfig+0x8a>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a27      	ldr	r2, [pc, #156]	@ (80022f0 <TIM_Base_SetConfig+0x104>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d00f      	beq.n	8002276 <TIM_Base_SetConfig+0x8a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a26      	ldr	r2, [pc, #152]	@ (80022f4 <TIM_Base_SetConfig+0x108>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d00b      	beq.n	8002276 <TIM_Base_SetConfig+0x8a>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a25      	ldr	r2, [pc, #148]	@ (80022f8 <TIM_Base_SetConfig+0x10c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d007      	beq.n	8002276 <TIM_Base_SetConfig+0x8a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a24      	ldr	r2, [pc, #144]	@ (80022fc <TIM_Base_SetConfig+0x110>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d003      	beq.n	8002276 <TIM_Base_SetConfig+0x8a>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a23      	ldr	r2, [pc, #140]	@ (8002300 <TIM_Base_SetConfig+0x114>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d108      	bne.n	8002288 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800227c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	4313      	orrs	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	4313      	orrs	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a0e      	ldr	r2, [pc, #56]	@ (80022e8 <TIM_Base_SetConfig+0xfc>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d103      	bne.n	80022bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	691a      	ldr	r2, [r3, #16]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d105      	bne.n	80022da <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	f023 0201 	bic.w	r2, r3, #1
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	611a      	str	r2, [r3, #16]
  }
}
 80022da:	bf00      	nop
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	40010000 	.word	0x40010000
 80022ec:	40000400 	.word	0x40000400
 80022f0:	40000800 	.word	0x40000800
 80022f4:	40000c00 	.word	0x40000c00
 80022f8:	40014000 	.word	0x40014000
 80022fc:	40014400 	.word	0x40014400
 8002300:	40014800 	.word	0x40014800

08002304 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002304:	b480      	push	{r7}
 8002306:	b087      	sub	sp, #28
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	f023 0201 	bic.w	r2, r3, #1
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f023 0303 	bic.w	r3, r3, #3
 800233a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	4313      	orrs	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f023 0302 	bic.w	r3, r3, #2
 800234c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	4313      	orrs	r3, r2
 8002356:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a1c      	ldr	r2, [pc, #112]	@ (80023cc <TIM_OC1_SetConfig+0xc8>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d10c      	bne.n	800237a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	f023 0308 	bic.w	r3, r3, #8
 8002366:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	4313      	orrs	r3, r2
 8002370:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f023 0304 	bic.w	r3, r3, #4
 8002378:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a13      	ldr	r2, [pc, #76]	@ (80023cc <TIM_OC1_SetConfig+0xc8>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d111      	bne.n	80023a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002388:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002390:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	621a      	str	r2, [r3, #32]
}
 80023c0:	bf00      	nop
 80023c2:	371c      	adds	r7, #28
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	40010000 	.word	0x40010000

080023d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b087      	sub	sp, #28
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	f023 0210 	bic.w	r2, r3, #16
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002406:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	021b      	lsls	r3, r3, #8
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	4313      	orrs	r3, r2
 8002412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	f023 0320 	bic.w	r3, r3, #32
 800241a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	011b      	lsls	r3, r3, #4
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	4313      	orrs	r3, r2
 8002426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a1e      	ldr	r2, [pc, #120]	@ (80024a4 <TIM_OC2_SetConfig+0xd4>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d10d      	bne.n	800244c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002436:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	4313      	orrs	r3, r2
 8002442:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800244a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a15      	ldr	r2, [pc, #84]	@ (80024a4 <TIM_OC2_SetConfig+0xd4>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d113      	bne.n	800247c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800245a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002462:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	4313      	orrs	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	621a      	str	r2, [r3, #32]
}
 8002496:	bf00      	nop
 8002498:	371c      	adds	r7, #28
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	40010000 	.word	0x40010000

080024a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b087      	sub	sp, #28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f023 0303 	bic.w	r3, r3, #3
 80024de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80024f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	021b      	lsls	r3, r3, #8
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a1d      	ldr	r2, [pc, #116]	@ (8002578 <TIM_OC3_SetConfig+0xd0>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d10d      	bne.n	8002522 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800250c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	021b      	lsls	r3, r3, #8
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	4313      	orrs	r3, r2
 8002518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a14      	ldr	r2, [pc, #80]	@ (8002578 <TIM_OC3_SetConfig+0xd0>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d113      	bne.n	8002552 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002530:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002538:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4313      	orrs	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	4313      	orrs	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	621a      	str	r2, [r3, #32]
}
 800256c:	bf00      	nop
 800256e:	371c      	adds	r7, #28
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	40010000 	.word	0x40010000

0800257c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800257c:	b480      	push	{r7}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	021b      	lsls	r3, r3, #8
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	4313      	orrs	r3, r2
 80025be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80025c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	031b      	lsls	r3, r3, #12
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a10      	ldr	r2, [pc, #64]	@ (8002618 <TIM_OC4_SetConfig+0x9c>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d109      	bne.n	80025f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80025e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	019b      	lsls	r3, r3, #6
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	621a      	str	r2, [r3, #32]
}
 800260a:	bf00      	nop
 800260c:	371c      	adds	r7, #28
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40010000 	.word	0x40010000

0800261c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800261c:	b480      	push	{r7}
 800261e:	b087      	sub	sp, #28
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	f023 0201 	bic.w	r2, r3, #1
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002646:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	4313      	orrs	r3, r2
 8002650:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	f023 030a 	bic.w	r3, r3, #10
 8002658:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	4313      	orrs	r3, r2
 8002660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	621a      	str	r2, [r3, #32]
}
 800266e:	bf00      	nop
 8002670:	371c      	adds	r7, #28
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800267a:	b480      	push	{r7}
 800267c:	b087      	sub	sp, #28
 800267e:	af00      	add	r7, sp, #0
 8002680:	60f8      	str	r0, [r7, #12]
 8002682:	60b9      	str	r1, [r7, #8]
 8002684:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	f023 0210 	bic.w	r2, r3, #16
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80026a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	031b      	lsls	r3, r3, #12
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80026b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	4313      	orrs	r3, r2
 80026c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	621a      	str	r2, [r3, #32]
}
 80026ce:	bf00      	nop
 80026d0:	371c      	adds	r7, #28
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026da:	b480      	push	{r7}
 80026dc:	b085      	sub	sp, #20
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	f043 0307 	orr.w	r3, r3, #7
 80026fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	609a      	str	r2, [r3, #8]
}
 8002704:	bf00      	nop
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002710:	b480      	push	{r7}
 8002712:	b087      	sub	sp, #28
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
 800271c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800272a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	021a      	lsls	r2, r3, #8
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	431a      	orrs	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	4313      	orrs	r3, r2
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	4313      	orrs	r3, r2
 800273c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	609a      	str	r2, [r3, #8]
}
 8002744:	bf00      	nop
 8002746:	371c      	adds	r7, #28
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002750:	b480      	push	{r7}
 8002752:	b087      	sub	sp, #28
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	f003 031f 	and.w	r3, r3, #31
 8002762:	2201      	movs	r2, #1
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6a1a      	ldr	r2, [r3, #32]
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	43db      	mvns	r3, r3
 8002772:	401a      	ands	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6a1a      	ldr	r2, [r3, #32]
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	f003 031f 	and.w	r3, r3, #31
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	fa01 f303 	lsl.w	r3, r1, r3
 8002788:	431a      	orrs	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	621a      	str	r2, [r3, #32]
}
 800278e:	bf00      	nop
 8002790:	371c      	adds	r7, #28
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
	...

0800279c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d101      	bne.n	80027b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027b0:	2302      	movs	r3, #2
 80027b2:	e050      	b.n	8002856 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2202      	movs	r2, #2
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a1c      	ldr	r2, [pc, #112]	@ (8002864 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d018      	beq.n	800282a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002800:	d013      	beq.n	800282a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a18      	ldr	r2, [pc, #96]	@ (8002868 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d00e      	beq.n	800282a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a16      	ldr	r2, [pc, #88]	@ (800286c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d009      	beq.n	800282a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a15      	ldr	r2, [pc, #84]	@ (8002870 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d004      	beq.n	800282a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a13      	ldr	r2, [pc, #76]	@ (8002874 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d10c      	bne.n	8002844 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002830:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	4313      	orrs	r3, r2
 800283a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	40010000 	.word	0x40010000
 8002868:	40000400 	.word	0x40000400
 800286c:	40000800 	.word	0x40000800
 8002870:	40000c00 	.word	0x40000c00
 8002874:	40014000 	.word	0x40014000

08002878 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800288c:	2b01      	cmp	r3, #1
 800288e:	d101      	bne.n	8002894 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002890:	2302      	movs	r3, #2
 8002892:	e03d      	b.n	8002910 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	4313      	orrs	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e042      	b.n	80029b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d106      	bne.n	8002948 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7fe f8bc 	bl	8000ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2224      	movs	r2, #36	@ 0x24
 800294c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68da      	ldr	r2, [r3, #12]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800295e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f973 	bl	8002c4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	691a      	ldr	r2, [r3, #16]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002974:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	695a      	ldr	r2, [r3, #20]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002984:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68da      	ldr	r2, [r3, #12]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002994:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2220      	movs	r2, #32
 80029a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2220      	movs	r2, #32
 80029a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b08a      	sub	sp, #40	@ 0x28
 80029c0:	af02      	add	r7, sp, #8
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	4613      	mov	r3, r2
 80029ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b20      	cmp	r3, #32
 80029da:	d175      	bne.n	8002ac8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d002      	beq.n	80029e8 <HAL_UART_Transmit+0x2c>
 80029e2:	88fb      	ldrh	r3, [r7, #6]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e06e      	b.n	8002aca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2221      	movs	r2, #33	@ 0x21
 80029f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029fa:	f7fe f9b1 	bl	8000d60 <HAL_GetTick>
 80029fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	88fa      	ldrh	r2, [r7, #6]
 8002a04:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	88fa      	ldrh	r2, [r7, #6]
 8002a0a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a14:	d108      	bne.n	8002a28 <HAL_UART_Transmit+0x6c>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d104      	bne.n	8002a28 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	61bb      	str	r3, [r7, #24]
 8002a26:	e003      	b.n	8002a30 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a30:	e02e      	b.n	8002a90 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2180      	movs	r1, #128	@ 0x80
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f000 f848 	bl	8002ad2 <UART_WaitOnFlagUntilTimeout>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d005      	beq.n	8002a54 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e03a      	b.n	8002aca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10b      	bne.n	8002a72 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	3302      	adds	r3, #2
 8002a6e:	61bb      	str	r3, [r7, #24]
 8002a70:	e007      	b.n	8002a82 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	781a      	ldrb	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1cb      	bne.n	8002a32 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	2140      	movs	r1, #64	@ 0x40
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 f814 	bl	8002ad2 <UART_WaitOnFlagUntilTimeout>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d005      	beq.n	8002abc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e006      	b.n	8002aca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	e000      	b.n	8002aca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002ac8:	2302      	movs	r3, #2
  }
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3720      	adds	r7, #32
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b086      	sub	sp, #24
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	60f8      	str	r0, [r7, #12]
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	603b      	str	r3, [r7, #0]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ae2:	e03b      	b.n	8002b5c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ae4:	6a3b      	ldr	r3, [r7, #32]
 8002ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aea:	d037      	beq.n	8002b5c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aec:	f7fe f938 	bl	8000d60 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	6a3a      	ldr	r2, [r7, #32]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d302      	bcc.n	8002b02 <UART_WaitOnFlagUntilTimeout+0x30>
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e03a      	b.n	8002b7c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d023      	beq.n	8002b5c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2b80      	cmp	r3, #128	@ 0x80
 8002b18:	d020      	beq.n	8002b5c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	2b40      	cmp	r3, #64	@ 0x40
 8002b1e:	d01d      	beq.n	8002b5c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0308 	and.w	r3, r3, #8
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d116      	bne.n	8002b5c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	617b      	str	r3, [r7, #20]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	617b      	str	r3, [r7, #20]
 8002b42:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 f81d 	bl	8002b84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2208      	movs	r2, #8
 8002b4e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e00f      	b.n	8002b7c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	4013      	ands	r3, r2
 8002b66:	68ba      	ldr	r2, [r7, #8]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	bf0c      	ite	eq
 8002b6c:	2301      	moveq	r3, #1
 8002b6e:	2300      	movne	r3, #0
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	461a      	mov	r2, r3
 8002b74:	79fb      	ldrb	r3, [r7, #7]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d0b4      	beq.n	8002ae4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b095      	sub	sp, #84	@ 0x54
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	330c      	adds	r3, #12
 8002b92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b96:	e853 3f00 	ldrex	r3, [r3]
 8002b9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	330c      	adds	r3, #12
 8002baa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002bac:	643a      	str	r2, [r7, #64]	@ 0x40
 8002bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002bb2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002bb4:	e841 2300 	strex	r3, r2, [r1]
 8002bb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1e5      	bne.n	8002b8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	3314      	adds	r3, #20
 8002bc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	e853 3f00 	ldrex	r3, [r3]
 8002bce:	61fb      	str	r3, [r7, #28]
   return(result);
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f023 0301 	bic.w	r3, r3, #1
 8002bd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	3314      	adds	r3, #20
 8002bde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002be0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002be2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002be6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002be8:	e841 2300 	strex	r3, r2, [r1]
 8002bec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1e5      	bne.n	8002bc0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d119      	bne.n	8002c30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	330c      	adds	r3, #12
 8002c02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	e853 3f00 	ldrex	r3, [r3]
 8002c0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	f023 0310 	bic.w	r3, r3, #16
 8002c12:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	330c      	adds	r3, #12
 8002c1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c1c:	61ba      	str	r2, [r7, #24]
 8002c1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c20:	6979      	ldr	r1, [r7, #20]
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	e841 2300 	strex	r3, r2, [r1]
 8002c28:	613b      	str	r3, [r7, #16]
   return(result);
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1e5      	bne.n	8002bfc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002c3e:	bf00      	nop
 8002c40:	3754      	adds	r7, #84	@ 0x54
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
	...

08002c4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c50:	b0c0      	sub	sp, #256	@ 0x100
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c68:	68d9      	ldr	r1, [r3, #12]
 8002c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	ea40 0301 	orr.w	r3, r0, r1
 8002c74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	431a      	orrs	r2, r3
 8002c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002ca4:	f021 010c 	bic.w	r1, r1, #12
 8002ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002cb2:	430b      	orrs	r3, r1
 8002cb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc6:	6999      	ldr	r1, [r3, #24]
 8002cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	ea40 0301 	orr.w	r3, r0, r1
 8002cd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	4b8f      	ldr	r3, [pc, #572]	@ (8002f18 <UART_SetConfig+0x2cc>)
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d005      	beq.n	8002cec <UART_SetConfig+0xa0>
 8002ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	4b8d      	ldr	r3, [pc, #564]	@ (8002f1c <UART_SetConfig+0x2d0>)
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d104      	bne.n	8002cf6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cec:	f7fe ff88 	bl	8001c00 <HAL_RCC_GetPCLK2Freq>
 8002cf0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002cf4:	e003      	b.n	8002cfe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cf6:	f7fe ff6f 	bl	8001bd8 <HAL_RCC_GetPCLK1Freq>
 8002cfa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d02:	69db      	ldr	r3, [r3, #28]
 8002d04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d08:	f040 810c 	bne.w	8002f24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d10:	2200      	movs	r2, #0
 8002d12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002d16:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002d1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002d1e:	4622      	mov	r2, r4
 8002d20:	462b      	mov	r3, r5
 8002d22:	1891      	adds	r1, r2, r2
 8002d24:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002d26:	415b      	adcs	r3, r3
 8002d28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d2e:	4621      	mov	r1, r4
 8002d30:	eb12 0801 	adds.w	r8, r2, r1
 8002d34:	4629      	mov	r1, r5
 8002d36:	eb43 0901 	adc.w	r9, r3, r1
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	f04f 0300 	mov.w	r3, #0
 8002d42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d4e:	4690      	mov	r8, r2
 8002d50:	4699      	mov	r9, r3
 8002d52:	4623      	mov	r3, r4
 8002d54:	eb18 0303 	adds.w	r3, r8, r3
 8002d58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002d5c:	462b      	mov	r3, r5
 8002d5e:	eb49 0303 	adc.w	r3, r9, r3
 8002d62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002d72:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002d76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	18db      	adds	r3, r3, r3
 8002d7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d80:	4613      	mov	r3, r2
 8002d82:	eb42 0303 	adc.w	r3, r2, r3
 8002d86:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002d8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002d90:	f7fd fa7e 	bl	8000290 <__aeabi_uldivmod>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	4b61      	ldr	r3, [pc, #388]	@ (8002f20 <UART_SetConfig+0x2d4>)
 8002d9a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d9e:	095b      	lsrs	r3, r3, #5
 8002da0:	011c      	lsls	r4, r3, #4
 8002da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002da6:	2200      	movs	r2, #0
 8002da8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002dac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002db0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002db4:	4642      	mov	r2, r8
 8002db6:	464b      	mov	r3, r9
 8002db8:	1891      	adds	r1, r2, r2
 8002dba:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002dbc:	415b      	adcs	r3, r3
 8002dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002dc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002dc4:	4641      	mov	r1, r8
 8002dc6:	eb12 0a01 	adds.w	sl, r2, r1
 8002dca:	4649      	mov	r1, r9
 8002dcc:	eb43 0b01 	adc.w	fp, r3, r1
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ddc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002de0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002de4:	4692      	mov	sl, r2
 8002de6:	469b      	mov	fp, r3
 8002de8:	4643      	mov	r3, r8
 8002dea:	eb1a 0303 	adds.w	r3, sl, r3
 8002dee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002df2:	464b      	mov	r3, r9
 8002df4:	eb4b 0303 	adc.w	r3, fp, r3
 8002df8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e08:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002e0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002e10:	460b      	mov	r3, r1
 8002e12:	18db      	adds	r3, r3, r3
 8002e14:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e16:	4613      	mov	r3, r2
 8002e18:	eb42 0303 	adc.w	r3, r2, r3
 8002e1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002e22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002e26:	f7fd fa33 	bl	8000290 <__aeabi_uldivmod>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4611      	mov	r1, r2
 8002e30:	4b3b      	ldr	r3, [pc, #236]	@ (8002f20 <UART_SetConfig+0x2d4>)
 8002e32:	fba3 2301 	umull	r2, r3, r3, r1
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	2264      	movs	r2, #100	@ 0x64
 8002e3a:	fb02 f303 	mul.w	r3, r2, r3
 8002e3e:	1acb      	subs	r3, r1, r3
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002e46:	4b36      	ldr	r3, [pc, #216]	@ (8002f20 <UART_SetConfig+0x2d4>)
 8002e48:	fba3 2302 	umull	r2, r3, r3, r2
 8002e4c:	095b      	lsrs	r3, r3, #5
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002e54:	441c      	add	r4, r3
 8002e56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002e60:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002e64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002e68:	4642      	mov	r2, r8
 8002e6a:	464b      	mov	r3, r9
 8002e6c:	1891      	adds	r1, r2, r2
 8002e6e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002e70:	415b      	adcs	r3, r3
 8002e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002e78:	4641      	mov	r1, r8
 8002e7a:	1851      	adds	r1, r2, r1
 8002e7c:	6339      	str	r1, [r7, #48]	@ 0x30
 8002e7e:	4649      	mov	r1, r9
 8002e80:	414b      	adcs	r3, r1
 8002e82:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	f04f 0300 	mov.w	r3, #0
 8002e8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002e90:	4659      	mov	r1, fp
 8002e92:	00cb      	lsls	r3, r1, #3
 8002e94:	4651      	mov	r1, sl
 8002e96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e9a:	4651      	mov	r1, sl
 8002e9c:	00ca      	lsls	r2, r1, #3
 8002e9e:	4610      	mov	r0, r2
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	4642      	mov	r2, r8
 8002ea6:	189b      	adds	r3, r3, r2
 8002ea8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002eac:	464b      	mov	r3, r9
 8002eae:	460a      	mov	r2, r1
 8002eb0:	eb42 0303 	adc.w	r3, r2, r3
 8002eb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002ec4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002ec8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002ecc:	460b      	mov	r3, r1
 8002ece:	18db      	adds	r3, r3, r3
 8002ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	eb42 0303 	adc.w	r3, r2, r3
 8002ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002eda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ede:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002ee2:	f7fd f9d5 	bl	8000290 <__aeabi_uldivmod>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4b0d      	ldr	r3, [pc, #52]	@ (8002f20 <UART_SetConfig+0x2d4>)
 8002eec:	fba3 1302 	umull	r1, r3, r3, r2
 8002ef0:	095b      	lsrs	r3, r3, #5
 8002ef2:	2164      	movs	r1, #100	@ 0x64
 8002ef4:	fb01 f303 	mul.w	r3, r1, r3
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	3332      	adds	r3, #50	@ 0x32
 8002efe:	4a08      	ldr	r2, [pc, #32]	@ (8002f20 <UART_SetConfig+0x2d4>)
 8002f00:	fba2 2303 	umull	r2, r3, r2, r3
 8002f04:	095b      	lsrs	r3, r3, #5
 8002f06:	f003 0207 	and.w	r2, r3, #7
 8002f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4422      	add	r2, r4
 8002f12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f14:	e106      	b.n	8003124 <UART_SetConfig+0x4d8>
 8002f16:	bf00      	nop
 8002f18:	40011000 	.word	0x40011000
 8002f1c:	40011400 	.word	0x40011400
 8002f20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002f2e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002f32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002f36:	4642      	mov	r2, r8
 8002f38:	464b      	mov	r3, r9
 8002f3a:	1891      	adds	r1, r2, r2
 8002f3c:	6239      	str	r1, [r7, #32]
 8002f3e:	415b      	adcs	r3, r3
 8002f40:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f46:	4641      	mov	r1, r8
 8002f48:	1854      	adds	r4, r2, r1
 8002f4a:	4649      	mov	r1, r9
 8002f4c:	eb43 0501 	adc.w	r5, r3, r1
 8002f50:	f04f 0200 	mov.w	r2, #0
 8002f54:	f04f 0300 	mov.w	r3, #0
 8002f58:	00eb      	lsls	r3, r5, #3
 8002f5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f5e:	00e2      	lsls	r2, r4, #3
 8002f60:	4614      	mov	r4, r2
 8002f62:	461d      	mov	r5, r3
 8002f64:	4643      	mov	r3, r8
 8002f66:	18e3      	adds	r3, r4, r3
 8002f68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002f6c:	464b      	mov	r3, r9
 8002f6e:	eb45 0303 	adc.w	r3, r5, r3
 8002f72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002f82:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002f86:	f04f 0200 	mov.w	r2, #0
 8002f8a:	f04f 0300 	mov.w	r3, #0
 8002f8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002f92:	4629      	mov	r1, r5
 8002f94:	008b      	lsls	r3, r1, #2
 8002f96:	4621      	mov	r1, r4
 8002f98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f9c:	4621      	mov	r1, r4
 8002f9e:	008a      	lsls	r2, r1, #2
 8002fa0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002fa4:	f7fd f974 	bl	8000290 <__aeabi_uldivmod>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4b60      	ldr	r3, [pc, #384]	@ (8003130 <UART_SetConfig+0x4e4>)
 8002fae:	fba3 2302 	umull	r2, r3, r3, r2
 8002fb2:	095b      	lsrs	r3, r3, #5
 8002fb4:	011c      	lsls	r4, r3, #4
 8002fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002fc0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002fc4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002fc8:	4642      	mov	r2, r8
 8002fca:	464b      	mov	r3, r9
 8002fcc:	1891      	adds	r1, r2, r2
 8002fce:	61b9      	str	r1, [r7, #24]
 8002fd0:	415b      	adcs	r3, r3
 8002fd2:	61fb      	str	r3, [r7, #28]
 8002fd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fd8:	4641      	mov	r1, r8
 8002fda:	1851      	adds	r1, r2, r1
 8002fdc:	6139      	str	r1, [r7, #16]
 8002fde:	4649      	mov	r1, r9
 8002fe0:	414b      	adcs	r3, r1
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ff0:	4659      	mov	r1, fp
 8002ff2:	00cb      	lsls	r3, r1, #3
 8002ff4:	4651      	mov	r1, sl
 8002ff6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ffa:	4651      	mov	r1, sl
 8002ffc:	00ca      	lsls	r2, r1, #3
 8002ffe:	4610      	mov	r0, r2
 8003000:	4619      	mov	r1, r3
 8003002:	4603      	mov	r3, r0
 8003004:	4642      	mov	r2, r8
 8003006:	189b      	adds	r3, r3, r2
 8003008:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800300c:	464b      	mov	r3, r9
 800300e:	460a      	mov	r2, r1
 8003010:	eb42 0303 	adc.w	r3, r2, r3
 8003014:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003022:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003030:	4649      	mov	r1, r9
 8003032:	008b      	lsls	r3, r1, #2
 8003034:	4641      	mov	r1, r8
 8003036:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800303a:	4641      	mov	r1, r8
 800303c:	008a      	lsls	r2, r1, #2
 800303e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003042:	f7fd f925 	bl	8000290 <__aeabi_uldivmod>
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	4611      	mov	r1, r2
 800304c:	4b38      	ldr	r3, [pc, #224]	@ (8003130 <UART_SetConfig+0x4e4>)
 800304e:	fba3 2301 	umull	r2, r3, r3, r1
 8003052:	095b      	lsrs	r3, r3, #5
 8003054:	2264      	movs	r2, #100	@ 0x64
 8003056:	fb02 f303 	mul.w	r3, r2, r3
 800305a:	1acb      	subs	r3, r1, r3
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	3332      	adds	r3, #50	@ 0x32
 8003060:	4a33      	ldr	r2, [pc, #204]	@ (8003130 <UART_SetConfig+0x4e4>)
 8003062:	fba2 2303 	umull	r2, r3, r2, r3
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800306c:	441c      	add	r4, r3
 800306e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003072:	2200      	movs	r2, #0
 8003074:	673b      	str	r3, [r7, #112]	@ 0x70
 8003076:	677a      	str	r2, [r7, #116]	@ 0x74
 8003078:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800307c:	4642      	mov	r2, r8
 800307e:	464b      	mov	r3, r9
 8003080:	1891      	adds	r1, r2, r2
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	415b      	adcs	r3, r3
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800308c:	4641      	mov	r1, r8
 800308e:	1851      	adds	r1, r2, r1
 8003090:	6039      	str	r1, [r7, #0]
 8003092:	4649      	mov	r1, r9
 8003094:	414b      	adcs	r3, r1
 8003096:	607b      	str	r3, [r7, #4]
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	f04f 0300 	mov.w	r3, #0
 80030a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80030a4:	4659      	mov	r1, fp
 80030a6:	00cb      	lsls	r3, r1, #3
 80030a8:	4651      	mov	r1, sl
 80030aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030ae:	4651      	mov	r1, sl
 80030b0:	00ca      	lsls	r2, r1, #3
 80030b2:	4610      	mov	r0, r2
 80030b4:	4619      	mov	r1, r3
 80030b6:	4603      	mov	r3, r0
 80030b8:	4642      	mov	r2, r8
 80030ba:	189b      	adds	r3, r3, r2
 80030bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80030be:	464b      	mov	r3, r9
 80030c0:	460a      	mov	r2, r1
 80030c2:	eb42 0303 	adc.w	r3, r2, r3
 80030c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80030c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80030d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80030e0:	4649      	mov	r1, r9
 80030e2:	008b      	lsls	r3, r1, #2
 80030e4:	4641      	mov	r1, r8
 80030e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030ea:	4641      	mov	r1, r8
 80030ec:	008a      	lsls	r2, r1, #2
 80030ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80030f2:	f7fd f8cd 	bl	8000290 <__aeabi_uldivmod>
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003130 <UART_SetConfig+0x4e4>)
 80030fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003100:	095b      	lsrs	r3, r3, #5
 8003102:	2164      	movs	r1, #100	@ 0x64
 8003104:	fb01 f303 	mul.w	r3, r1, r3
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	3332      	adds	r3, #50	@ 0x32
 800310e:	4a08      	ldr	r2, [pc, #32]	@ (8003130 <UART_SetConfig+0x4e4>)
 8003110:	fba2 2303 	umull	r2, r3, r2, r3
 8003114:	095b      	lsrs	r3, r3, #5
 8003116:	f003 020f 	and.w	r2, r3, #15
 800311a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4422      	add	r2, r4
 8003122:	609a      	str	r2, [r3, #8]
}
 8003124:	bf00      	nop
 8003126:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800312a:	46bd      	mov	sp, r7
 800312c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003130:	51eb851f 	.word	0x51eb851f

08003134 <siprintf>:
 8003134:	b40e      	push	{r1, r2, r3}
 8003136:	b500      	push	{lr}
 8003138:	b09c      	sub	sp, #112	@ 0x70
 800313a:	ab1d      	add	r3, sp, #116	@ 0x74
 800313c:	9002      	str	r0, [sp, #8]
 800313e:	9006      	str	r0, [sp, #24]
 8003140:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003144:	4809      	ldr	r0, [pc, #36]	@ (800316c <siprintf+0x38>)
 8003146:	9107      	str	r1, [sp, #28]
 8003148:	9104      	str	r1, [sp, #16]
 800314a:	4909      	ldr	r1, [pc, #36]	@ (8003170 <siprintf+0x3c>)
 800314c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003150:	9105      	str	r1, [sp, #20]
 8003152:	6800      	ldr	r0, [r0, #0]
 8003154:	9301      	str	r3, [sp, #4]
 8003156:	a902      	add	r1, sp, #8
 8003158:	f000 f994 	bl	8003484 <_svfiprintf_r>
 800315c:	9b02      	ldr	r3, [sp, #8]
 800315e:	2200      	movs	r2, #0
 8003160:	701a      	strb	r2, [r3, #0]
 8003162:	b01c      	add	sp, #112	@ 0x70
 8003164:	f85d eb04 	ldr.w	lr, [sp], #4
 8003168:	b003      	add	sp, #12
 800316a:	4770      	bx	lr
 800316c:	2000000c 	.word	0x2000000c
 8003170:	ffff0208 	.word	0xffff0208

08003174 <memset>:
 8003174:	4402      	add	r2, r0
 8003176:	4603      	mov	r3, r0
 8003178:	4293      	cmp	r3, r2
 800317a:	d100      	bne.n	800317e <memset+0xa>
 800317c:	4770      	bx	lr
 800317e:	f803 1b01 	strb.w	r1, [r3], #1
 8003182:	e7f9      	b.n	8003178 <memset+0x4>

08003184 <__errno>:
 8003184:	4b01      	ldr	r3, [pc, #4]	@ (800318c <__errno+0x8>)
 8003186:	6818      	ldr	r0, [r3, #0]
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	2000000c 	.word	0x2000000c

08003190 <__libc_init_array>:
 8003190:	b570      	push	{r4, r5, r6, lr}
 8003192:	4d0d      	ldr	r5, [pc, #52]	@ (80031c8 <__libc_init_array+0x38>)
 8003194:	4c0d      	ldr	r4, [pc, #52]	@ (80031cc <__libc_init_array+0x3c>)
 8003196:	1b64      	subs	r4, r4, r5
 8003198:	10a4      	asrs	r4, r4, #2
 800319a:	2600      	movs	r6, #0
 800319c:	42a6      	cmp	r6, r4
 800319e:	d109      	bne.n	80031b4 <__libc_init_array+0x24>
 80031a0:	4d0b      	ldr	r5, [pc, #44]	@ (80031d0 <__libc_init_array+0x40>)
 80031a2:	4c0c      	ldr	r4, [pc, #48]	@ (80031d4 <__libc_init_array+0x44>)
 80031a4:	f000 fc66 	bl	8003a74 <_init>
 80031a8:	1b64      	subs	r4, r4, r5
 80031aa:	10a4      	asrs	r4, r4, #2
 80031ac:	2600      	movs	r6, #0
 80031ae:	42a6      	cmp	r6, r4
 80031b0:	d105      	bne.n	80031be <__libc_init_array+0x2e>
 80031b2:	bd70      	pop	{r4, r5, r6, pc}
 80031b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80031b8:	4798      	blx	r3
 80031ba:	3601      	adds	r6, #1
 80031bc:	e7ee      	b.n	800319c <__libc_init_array+0xc>
 80031be:	f855 3b04 	ldr.w	r3, [r5], #4
 80031c2:	4798      	blx	r3
 80031c4:	3601      	adds	r6, #1
 80031c6:	e7f2      	b.n	80031ae <__libc_init_array+0x1e>
 80031c8:	08003af4 	.word	0x08003af4
 80031cc:	08003af4 	.word	0x08003af4
 80031d0:	08003af4 	.word	0x08003af4
 80031d4:	08003af8 	.word	0x08003af8

080031d8 <__retarget_lock_acquire_recursive>:
 80031d8:	4770      	bx	lr

080031da <__retarget_lock_release_recursive>:
 80031da:	4770      	bx	lr

080031dc <_free_r>:
 80031dc:	b538      	push	{r3, r4, r5, lr}
 80031de:	4605      	mov	r5, r0
 80031e0:	2900      	cmp	r1, #0
 80031e2:	d041      	beq.n	8003268 <_free_r+0x8c>
 80031e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031e8:	1f0c      	subs	r4, r1, #4
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	bfb8      	it	lt
 80031ee:	18e4      	addlt	r4, r4, r3
 80031f0:	f000 f8e0 	bl	80033b4 <__malloc_lock>
 80031f4:	4a1d      	ldr	r2, [pc, #116]	@ (800326c <_free_r+0x90>)
 80031f6:	6813      	ldr	r3, [r2, #0]
 80031f8:	b933      	cbnz	r3, 8003208 <_free_r+0x2c>
 80031fa:	6063      	str	r3, [r4, #4]
 80031fc:	6014      	str	r4, [r2, #0]
 80031fe:	4628      	mov	r0, r5
 8003200:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003204:	f000 b8dc 	b.w	80033c0 <__malloc_unlock>
 8003208:	42a3      	cmp	r3, r4
 800320a:	d908      	bls.n	800321e <_free_r+0x42>
 800320c:	6820      	ldr	r0, [r4, #0]
 800320e:	1821      	adds	r1, r4, r0
 8003210:	428b      	cmp	r3, r1
 8003212:	bf01      	itttt	eq
 8003214:	6819      	ldreq	r1, [r3, #0]
 8003216:	685b      	ldreq	r3, [r3, #4]
 8003218:	1809      	addeq	r1, r1, r0
 800321a:	6021      	streq	r1, [r4, #0]
 800321c:	e7ed      	b.n	80031fa <_free_r+0x1e>
 800321e:	461a      	mov	r2, r3
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	b10b      	cbz	r3, 8003228 <_free_r+0x4c>
 8003224:	42a3      	cmp	r3, r4
 8003226:	d9fa      	bls.n	800321e <_free_r+0x42>
 8003228:	6811      	ldr	r1, [r2, #0]
 800322a:	1850      	adds	r0, r2, r1
 800322c:	42a0      	cmp	r0, r4
 800322e:	d10b      	bne.n	8003248 <_free_r+0x6c>
 8003230:	6820      	ldr	r0, [r4, #0]
 8003232:	4401      	add	r1, r0
 8003234:	1850      	adds	r0, r2, r1
 8003236:	4283      	cmp	r3, r0
 8003238:	6011      	str	r1, [r2, #0]
 800323a:	d1e0      	bne.n	80031fe <_free_r+0x22>
 800323c:	6818      	ldr	r0, [r3, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	6053      	str	r3, [r2, #4]
 8003242:	4408      	add	r0, r1
 8003244:	6010      	str	r0, [r2, #0]
 8003246:	e7da      	b.n	80031fe <_free_r+0x22>
 8003248:	d902      	bls.n	8003250 <_free_r+0x74>
 800324a:	230c      	movs	r3, #12
 800324c:	602b      	str	r3, [r5, #0]
 800324e:	e7d6      	b.n	80031fe <_free_r+0x22>
 8003250:	6820      	ldr	r0, [r4, #0]
 8003252:	1821      	adds	r1, r4, r0
 8003254:	428b      	cmp	r3, r1
 8003256:	bf04      	itt	eq
 8003258:	6819      	ldreq	r1, [r3, #0]
 800325a:	685b      	ldreq	r3, [r3, #4]
 800325c:	6063      	str	r3, [r4, #4]
 800325e:	bf04      	itt	eq
 8003260:	1809      	addeq	r1, r1, r0
 8003262:	6021      	streq	r1, [r4, #0]
 8003264:	6054      	str	r4, [r2, #4]
 8003266:	e7ca      	b.n	80031fe <_free_r+0x22>
 8003268:	bd38      	pop	{r3, r4, r5, pc}
 800326a:	bf00      	nop
 800326c:	20000280 	.word	0x20000280

08003270 <sbrk_aligned>:
 8003270:	b570      	push	{r4, r5, r6, lr}
 8003272:	4e0f      	ldr	r6, [pc, #60]	@ (80032b0 <sbrk_aligned+0x40>)
 8003274:	460c      	mov	r4, r1
 8003276:	6831      	ldr	r1, [r6, #0]
 8003278:	4605      	mov	r5, r0
 800327a:	b911      	cbnz	r1, 8003282 <sbrk_aligned+0x12>
 800327c:	f000 fba6 	bl	80039cc <_sbrk_r>
 8003280:	6030      	str	r0, [r6, #0]
 8003282:	4621      	mov	r1, r4
 8003284:	4628      	mov	r0, r5
 8003286:	f000 fba1 	bl	80039cc <_sbrk_r>
 800328a:	1c43      	adds	r3, r0, #1
 800328c:	d103      	bne.n	8003296 <sbrk_aligned+0x26>
 800328e:	f04f 34ff 	mov.w	r4, #4294967295
 8003292:	4620      	mov	r0, r4
 8003294:	bd70      	pop	{r4, r5, r6, pc}
 8003296:	1cc4      	adds	r4, r0, #3
 8003298:	f024 0403 	bic.w	r4, r4, #3
 800329c:	42a0      	cmp	r0, r4
 800329e:	d0f8      	beq.n	8003292 <sbrk_aligned+0x22>
 80032a0:	1a21      	subs	r1, r4, r0
 80032a2:	4628      	mov	r0, r5
 80032a4:	f000 fb92 	bl	80039cc <_sbrk_r>
 80032a8:	3001      	adds	r0, #1
 80032aa:	d1f2      	bne.n	8003292 <sbrk_aligned+0x22>
 80032ac:	e7ef      	b.n	800328e <sbrk_aligned+0x1e>
 80032ae:	bf00      	nop
 80032b0:	2000027c 	.word	0x2000027c

080032b4 <_malloc_r>:
 80032b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032b8:	1ccd      	adds	r5, r1, #3
 80032ba:	f025 0503 	bic.w	r5, r5, #3
 80032be:	3508      	adds	r5, #8
 80032c0:	2d0c      	cmp	r5, #12
 80032c2:	bf38      	it	cc
 80032c4:	250c      	movcc	r5, #12
 80032c6:	2d00      	cmp	r5, #0
 80032c8:	4606      	mov	r6, r0
 80032ca:	db01      	blt.n	80032d0 <_malloc_r+0x1c>
 80032cc:	42a9      	cmp	r1, r5
 80032ce:	d904      	bls.n	80032da <_malloc_r+0x26>
 80032d0:	230c      	movs	r3, #12
 80032d2:	6033      	str	r3, [r6, #0]
 80032d4:	2000      	movs	r0, #0
 80032d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80033b0 <_malloc_r+0xfc>
 80032de:	f000 f869 	bl	80033b4 <__malloc_lock>
 80032e2:	f8d8 3000 	ldr.w	r3, [r8]
 80032e6:	461c      	mov	r4, r3
 80032e8:	bb44      	cbnz	r4, 800333c <_malloc_r+0x88>
 80032ea:	4629      	mov	r1, r5
 80032ec:	4630      	mov	r0, r6
 80032ee:	f7ff ffbf 	bl	8003270 <sbrk_aligned>
 80032f2:	1c43      	adds	r3, r0, #1
 80032f4:	4604      	mov	r4, r0
 80032f6:	d158      	bne.n	80033aa <_malloc_r+0xf6>
 80032f8:	f8d8 4000 	ldr.w	r4, [r8]
 80032fc:	4627      	mov	r7, r4
 80032fe:	2f00      	cmp	r7, #0
 8003300:	d143      	bne.n	800338a <_malloc_r+0xd6>
 8003302:	2c00      	cmp	r4, #0
 8003304:	d04b      	beq.n	800339e <_malloc_r+0xea>
 8003306:	6823      	ldr	r3, [r4, #0]
 8003308:	4639      	mov	r1, r7
 800330a:	4630      	mov	r0, r6
 800330c:	eb04 0903 	add.w	r9, r4, r3
 8003310:	f000 fb5c 	bl	80039cc <_sbrk_r>
 8003314:	4581      	cmp	r9, r0
 8003316:	d142      	bne.n	800339e <_malloc_r+0xea>
 8003318:	6821      	ldr	r1, [r4, #0]
 800331a:	1a6d      	subs	r5, r5, r1
 800331c:	4629      	mov	r1, r5
 800331e:	4630      	mov	r0, r6
 8003320:	f7ff ffa6 	bl	8003270 <sbrk_aligned>
 8003324:	3001      	adds	r0, #1
 8003326:	d03a      	beq.n	800339e <_malloc_r+0xea>
 8003328:	6823      	ldr	r3, [r4, #0]
 800332a:	442b      	add	r3, r5
 800332c:	6023      	str	r3, [r4, #0]
 800332e:	f8d8 3000 	ldr.w	r3, [r8]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	bb62      	cbnz	r2, 8003390 <_malloc_r+0xdc>
 8003336:	f8c8 7000 	str.w	r7, [r8]
 800333a:	e00f      	b.n	800335c <_malloc_r+0xa8>
 800333c:	6822      	ldr	r2, [r4, #0]
 800333e:	1b52      	subs	r2, r2, r5
 8003340:	d420      	bmi.n	8003384 <_malloc_r+0xd0>
 8003342:	2a0b      	cmp	r2, #11
 8003344:	d917      	bls.n	8003376 <_malloc_r+0xc2>
 8003346:	1961      	adds	r1, r4, r5
 8003348:	42a3      	cmp	r3, r4
 800334a:	6025      	str	r5, [r4, #0]
 800334c:	bf18      	it	ne
 800334e:	6059      	strne	r1, [r3, #4]
 8003350:	6863      	ldr	r3, [r4, #4]
 8003352:	bf08      	it	eq
 8003354:	f8c8 1000 	streq.w	r1, [r8]
 8003358:	5162      	str	r2, [r4, r5]
 800335a:	604b      	str	r3, [r1, #4]
 800335c:	4630      	mov	r0, r6
 800335e:	f000 f82f 	bl	80033c0 <__malloc_unlock>
 8003362:	f104 000b 	add.w	r0, r4, #11
 8003366:	1d23      	adds	r3, r4, #4
 8003368:	f020 0007 	bic.w	r0, r0, #7
 800336c:	1ac2      	subs	r2, r0, r3
 800336e:	bf1c      	itt	ne
 8003370:	1a1b      	subne	r3, r3, r0
 8003372:	50a3      	strne	r3, [r4, r2]
 8003374:	e7af      	b.n	80032d6 <_malloc_r+0x22>
 8003376:	6862      	ldr	r2, [r4, #4]
 8003378:	42a3      	cmp	r3, r4
 800337a:	bf0c      	ite	eq
 800337c:	f8c8 2000 	streq.w	r2, [r8]
 8003380:	605a      	strne	r2, [r3, #4]
 8003382:	e7eb      	b.n	800335c <_malloc_r+0xa8>
 8003384:	4623      	mov	r3, r4
 8003386:	6864      	ldr	r4, [r4, #4]
 8003388:	e7ae      	b.n	80032e8 <_malloc_r+0x34>
 800338a:	463c      	mov	r4, r7
 800338c:	687f      	ldr	r7, [r7, #4]
 800338e:	e7b6      	b.n	80032fe <_malloc_r+0x4a>
 8003390:	461a      	mov	r2, r3
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	42a3      	cmp	r3, r4
 8003396:	d1fb      	bne.n	8003390 <_malloc_r+0xdc>
 8003398:	2300      	movs	r3, #0
 800339a:	6053      	str	r3, [r2, #4]
 800339c:	e7de      	b.n	800335c <_malloc_r+0xa8>
 800339e:	230c      	movs	r3, #12
 80033a0:	6033      	str	r3, [r6, #0]
 80033a2:	4630      	mov	r0, r6
 80033a4:	f000 f80c 	bl	80033c0 <__malloc_unlock>
 80033a8:	e794      	b.n	80032d4 <_malloc_r+0x20>
 80033aa:	6005      	str	r5, [r0, #0]
 80033ac:	e7d6      	b.n	800335c <_malloc_r+0xa8>
 80033ae:	bf00      	nop
 80033b0:	20000280 	.word	0x20000280

080033b4 <__malloc_lock>:
 80033b4:	4801      	ldr	r0, [pc, #4]	@ (80033bc <__malloc_lock+0x8>)
 80033b6:	f7ff bf0f 	b.w	80031d8 <__retarget_lock_acquire_recursive>
 80033ba:	bf00      	nop
 80033bc:	20000278 	.word	0x20000278

080033c0 <__malloc_unlock>:
 80033c0:	4801      	ldr	r0, [pc, #4]	@ (80033c8 <__malloc_unlock+0x8>)
 80033c2:	f7ff bf0a 	b.w	80031da <__retarget_lock_release_recursive>
 80033c6:	bf00      	nop
 80033c8:	20000278 	.word	0x20000278

080033cc <__ssputs_r>:
 80033cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033d0:	688e      	ldr	r6, [r1, #8]
 80033d2:	461f      	mov	r7, r3
 80033d4:	42be      	cmp	r6, r7
 80033d6:	680b      	ldr	r3, [r1, #0]
 80033d8:	4682      	mov	sl, r0
 80033da:	460c      	mov	r4, r1
 80033dc:	4690      	mov	r8, r2
 80033de:	d82d      	bhi.n	800343c <__ssputs_r+0x70>
 80033e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80033e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80033e8:	d026      	beq.n	8003438 <__ssputs_r+0x6c>
 80033ea:	6965      	ldr	r5, [r4, #20]
 80033ec:	6909      	ldr	r1, [r1, #16]
 80033ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033f2:	eba3 0901 	sub.w	r9, r3, r1
 80033f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80033fa:	1c7b      	adds	r3, r7, #1
 80033fc:	444b      	add	r3, r9
 80033fe:	106d      	asrs	r5, r5, #1
 8003400:	429d      	cmp	r5, r3
 8003402:	bf38      	it	cc
 8003404:	461d      	movcc	r5, r3
 8003406:	0553      	lsls	r3, r2, #21
 8003408:	d527      	bpl.n	800345a <__ssputs_r+0x8e>
 800340a:	4629      	mov	r1, r5
 800340c:	f7ff ff52 	bl	80032b4 <_malloc_r>
 8003410:	4606      	mov	r6, r0
 8003412:	b360      	cbz	r0, 800346e <__ssputs_r+0xa2>
 8003414:	6921      	ldr	r1, [r4, #16]
 8003416:	464a      	mov	r2, r9
 8003418:	f000 fae8 	bl	80039ec <memcpy>
 800341c:	89a3      	ldrh	r3, [r4, #12]
 800341e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003422:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003426:	81a3      	strh	r3, [r4, #12]
 8003428:	6126      	str	r6, [r4, #16]
 800342a:	6165      	str	r5, [r4, #20]
 800342c:	444e      	add	r6, r9
 800342e:	eba5 0509 	sub.w	r5, r5, r9
 8003432:	6026      	str	r6, [r4, #0]
 8003434:	60a5      	str	r5, [r4, #8]
 8003436:	463e      	mov	r6, r7
 8003438:	42be      	cmp	r6, r7
 800343a:	d900      	bls.n	800343e <__ssputs_r+0x72>
 800343c:	463e      	mov	r6, r7
 800343e:	6820      	ldr	r0, [r4, #0]
 8003440:	4632      	mov	r2, r6
 8003442:	4641      	mov	r1, r8
 8003444:	f000 faa8 	bl	8003998 <memmove>
 8003448:	68a3      	ldr	r3, [r4, #8]
 800344a:	1b9b      	subs	r3, r3, r6
 800344c:	60a3      	str	r3, [r4, #8]
 800344e:	6823      	ldr	r3, [r4, #0]
 8003450:	4433      	add	r3, r6
 8003452:	6023      	str	r3, [r4, #0]
 8003454:	2000      	movs	r0, #0
 8003456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800345a:	462a      	mov	r2, r5
 800345c:	f000 fad4 	bl	8003a08 <_realloc_r>
 8003460:	4606      	mov	r6, r0
 8003462:	2800      	cmp	r0, #0
 8003464:	d1e0      	bne.n	8003428 <__ssputs_r+0x5c>
 8003466:	6921      	ldr	r1, [r4, #16]
 8003468:	4650      	mov	r0, sl
 800346a:	f7ff feb7 	bl	80031dc <_free_r>
 800346e:	230c      	movs	r3, #12
 8003470:	f8ca 3000 	str.w	r3, [sl]
 8003474:	89a3      	ldrh	r3, [r4, #12]
 8003476:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800347a:	81a3      	strh	r3, [r4, #12]
 800347c:	f04f 30ff 	mov.w	r0, #4294967295
 8003480:	e7e9      	b.n	8003456 <__ssputs_r+0x8a>
	...

08003484 <_svfiprintf_r>:
 8003484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003488:	4698      	mov	r8, r3
 800348a:	898b      	ldrh	r3, [r1, #12]
 800348c:	061b      	lsls	r3, r3, #24
 800348e:	b09d      	sub	sp, #116	@ 0x74
 8003490:	4607      	mov	r7, r0
 8003492:	460d      	mov	r5, r1
 8003494:	4614      	mov	r4, r2
 8003496:	d510      	bpl.n	80034ba <_svfiprintf_r+0x36>
 8003498:	690b      	ldr	r3, [r1, #16]
 800349a:	b973      	cbnz	r3, 80034ba <_svfiprintf_r+0x36>
 800349c:	2140      	movs	r1, #64	@ 0x40
 800349e:	f7ff ff09 	bl	80032b4 <_malloc_r>
 80034a2:	6028      	str	r0, [r5, #0]
 80034a4:	6128      	str	r0, [r5, #16]
 80034a6:	b930      	cbnz	r0, 80034b6 <_svfiprintf_r+0x32>
 80034a8:	230c      	movs	r3, #12
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	f04f 30ff 	mov.w	r0, #4294967295
 80034b0:	b01d      	add	sp, #116	@ 0x74
 80034b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034b6:	2340      	movs	r3, #64	@ 0x40
 80034b8:	616b      	str	r3, [r5, #20]
 80034ba:	2300      	movs	r3, #0
 80034bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80034be:	2320      	movs	r3, #32
 80034c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80034c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80034c8:	2330      	movs	r3, #48	@ 0x30
 80034ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003668 <_svfiprintf_r+0x1e4>
 80034ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80034d2:	f04f 0901 	mov.w	r9, #1
 80034d6:	4623      	mov	r3, r4
 80034d8:	469a      	mov	sl, r3
 80034da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034de:	b10a      	cbz	r2, 80034e4 <_svfiprintf_r+0x60>
 80034e0:	2a25      	cmp	r2, #37	@ 0x25
 80034e2:	d1f9      	bne.n	80034d8 <_svfiprintf_r+0x54>
 80034e4:	ebba 0b04 	subs.w	fp, sl, r4
 80034e8:	d00b      	beq.n	8003502 <_svfiprintf_r+0x7e>
 80034ea:	465b      	mov	r3, fp
 80034ec:	4622      	mov	r2, r4
 80034ee:	4629      	mov	r1, r5
 80034f0:	4638      	mov	r0, r7
 80034f2:	f7ff ff6b 	bl	80033cc <__ssputs_r>
 80034f6:	3001      	adds	r0, #1
 80034f8:	f000 80a7 	beq.w	800364a <_svfiprintf_r+0x1c6>
 80034fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80034fe:	445a      	add	r2, fp
 8003500:	9209      	str	r2, [sp, #36]	@ 0x24
 8003502:	f89a 3000 	ldrb.w	r3, [sl]
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 809f 	beq.w	800364a <_svfiprintf_r+0x1c6>
 800350c:	2300      	movs	r3, #0
 800350e:	f04f 32ff 	mov.w	r2, #4294967295
 8003512:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003516:	f10a 0a01 	add.w	sl, sl, #1
 800351a:	9304      	str	r3, [sp, #16]
 800351c:	9307      	str	r3, [sp, #28]
 800351e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003522:	931a      	str	r3, [sp, #104]	@ 0x68
 8003524:	4654      	mov	r4, sl
 8003526:	2205      	movs	r2, #5
 8003528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800352c:	484e      	ldr	r0, [pc, #312]	@ (8003668 <_svfiprintf_r+0x1e4>)
 800352e:	f7fc fe5f 	bl	80001f0 <memchr>
 8003532:	9a04      	ldr	r2, [sp, #16]
 8003534:	b9d8      	cbnz	r0, 800356e <_svfiprintf_r+0xea>
 8003536:	06d0      	lsls	r0, r2, #27
 8003538:	bf44      	itt	mi
 800353a:	2320      	movmi	r3, #32
 800353c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003540:	0711      	lsls	r1, r2, #28
 8003542:	bf44      	itt	mi
 8003544:	232b      	movmi	r3, #43	@ 0x2b
 8003546:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800354a:	f89a 3000 	ldrb.w	r3, [sl]
 800354e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003550:	d015      	beq.n	800357e <_svfiprintf_r+0xfa>
 8003552:	9a07      	ldr	r2, [sp, #28]
 8003554:	4654      	mov	r4, sl
 8003556:	2000      	movs	r0, #0
 8003558:	f04f 0c0a 	mov.w	ip, #10
 800355c:	4621      	mov	r1, r4
 800355e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003562:	3b30      	subs	r3, #48	@ 0x30
 8003564:	2b09      	cmp	r3, #9
 8003566:	d94b      	bls.n	8003600 <_svfiprintf_r+0x17c>
 8003568:	b1b0      	cbz	r0, 8003598 <_svfiprintf_r+0x114>
 800356a:	9207      	str	r2, [sp, #28]
 800356c:	e014      	b.n	8003598 <_svfiprintf_r+0x114>
 800356e:	eba0 0308 	sub.w	r3, r0, r8
 8003572:	fa09 f303 	lsl.w	r3, r9, r3
 8003576:	4313      	orrs	r3, r2
 8003578:	9304      	str	r3, [sp, #16]
 800357a:	46a2      	mov	sl, r4
 800357c:	e7d2      	b.n	8003524 <_svfiprintf_r+0xa0>
 800357e:	9b03      	ldr	r3, [sp, #12]
 8003580:	1d19      	adds	r1, r3, #4
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	9103      	str	r1, [sp, #12]
 8003586:	2b00      	cmp	r3, #0
 8003588:	bfbb      	ittet	lt
 800358a:	425b      	neglt	r3, r3
 800358c:	f042 0202 	orrlt.w	r2, r2, #2
 8003590:	9307      	strge	r3, [sp, #28]
 8003592:	9307      	strlt	r3, [sp, #28]
 8003594:	bfb8      	it	lt
 8003596:	9204      	strlt	r2, [sp, #16]
 8003598:	7823      	ldrb	r3, [r4, #0]
 800359a:	2b2e      	cmp	r3, #46	@ 0x2e
 800359c:	d10a      	bne.n	80035b4 <_svfiprintf_r+0x130>
 800359e:	7863      	ldrb	r3, [r4, #1]
 80035a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80035a2:	d132      	bne.n	800360a <_svfiprintf_r+0x186>
 80035a4:	9b03      	ldr	r3, [sp, #12]
 80035a6:	1d1a      	adds	r2, r3, #4
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	9203      	str	r2, [sp, #12]
 80035ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80035b0:	3402      	adds	r4, #2
 80035b2:	9305      	str	r3, [sp, #20]
 80035b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003678 <_svfiprintf_r+0x1f4>
 80035b8:	7821      	ldrb	r1, [r4, #0]
 80035ba:	2203      	movs	r2, #3
 80035bc:	4650      	mov	r0, sl
 80035be:	f7fc fe17 	bl	80001f0 <memchr>
 80035c2:	b138      	cbz	r0, 80035d4 <_svfiprintf_r+0x150>
 80035c4:	9b04      	ldr	r3, [sp, #16]
 80035c6:	eba0 000a 	sub.w	r0, r0, sl
 80035ca:	2240      	movs	r2, #64	@ 0x40
 80035cc:	4082      	lsls	r2, r0
 80035ce:	4313      	orrs	r3, r2
 80035d0:	3401      	adds	r4, #1
 80035d2:	9304      	str	r3, [sp, #16]
 80035d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035d8:	4824      	ldr	r0, [pc, #144]	@ (800366c <_svfiprintf_r+0x1e8>)
 80035da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80035de:	2206      	movs	r2, #6
 80035e0:	f7fc fe06 	bl	80001f0 <memchr>
 80035e4:	2800      	cmp	r0, #0
 80035e6:	d036      	beq.n	8003656 <_svfiprintf_r+0x1d2>
 80035e8:	4b21      	ldr	r3, [pc, #132]	@ (8003670 <_svfiprintf_r+0x1ec>)
 80035ea:	bb1b      	cbnz	r3, 8003634 <_svfiprintf_r+0x1b0>
 80035ec:	9b03      	ldr	r3, [sp, #12]
 80035ee:	3307      	adds	r3, #7
 80035f0:	f023 0307 	bic.w	r3, r3, #7
 80035f4:	3308      	adds	r3, #8
 80035f6:	9303      	str	r3, [sp, #12]
 80035f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80035fa:	4433      	add	r3, r6
 80035fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80035fe:	e76a      	b.n	80034d6 <_svfiprintf_r+0x52>
 8003600:	fb0c 3202 	mla	r2, ip, r2, r3
 8003604:	460c      	mov	r4, r1
 8003606:	2001      	movs	r0, #1
 8003608:	e7a8      	b.n	800355c <_svfiprintf_r+0xd8>
 800360a:	2300      	movs	r3, #0
 800360c:	3401      	adds	r4, #1
 800360e:	9305      	str	r3, [sp, #20]
 8003610:	4619      	mov	r1, r3
 8003612:	f04f 0c0a 	mov.w	ip, #10
 8003616:	4620      	mov	r0, r4
 8003618:	f810 2b01 	ldrb.w	r2, [r0], #1
 800361c:	3a30      	subs	r2, #48	@ 0x30
 800361e:	2a09      	cmp	r2, #9
 8003620:	d903      	bls.n	800362a <_svfiprintf_r+0x1a6>
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0c6      	beq.n	80035b4 <_svfiprintf_r+0x130>
 8003626:	9105      	str	r1, [sp, #20]
 8003628:	e7c4      	b.n	80035b4 <_svfiprintf_r+0x130>
 800362a:	fb0c 2101 	mla	r1, ip, r1, r2
 800362e:	4604      	mov	r4, r0
 8003630:	2301      	movs	r3, #1
 8003632:	e7f0      	b.n	8003616 <_svfiprintf_r+0x192>
 8003634:	ab03      	add	r3, sp, #12
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	462a      	mov	r2, r5
 800363a:	4b0e      	ldr	r3, [pc, #56]	@ (8003674 <_svfiprintf_r+0x1f0>)
 800363c:	a904      	add	r1, sp, #16
 800363e:	4638      	mov	r0, r7
 8003640:	f3af 8000 	nop.w
 8003644:	1c42      	adds	r2, r0, #1
 8003646:	4606      	mov	r6, r0
 8003648:	d1d6      	bne.n	80035f8 <_svfiprintf_r+0x174>
 800364a:	89ab      	ldrh	r3, [r5, #12]
 800364c:	065b      	lsls	r3, r3, #25
 800364e:	f53f af2d 	bmi.w	80034ac <_svfiprintf_r+0x28>
 8003652:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003654:	e72c      	b.n	80034b0 <_svfiprintf_r+0x2c>
 8003656:	ab03      	add	r3, sp, #12
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	462a      	mov	r2, r5
 800365c:	4b05      	ldr	r3, [pc, #20]	@ (8003674 <_svfiprintf_r+0x1f0>)
 800365e:	a904      	add	r1, sp, #16
 8003660:	4638      	mov	r0, r7
 8003662:	f000 f879 	bl	8003758 <_printf_i>
 8003666:	e7ed      	b.n	8003644 <_svfiprintf_r+0x1c0>
 8003668:	08003ab8 	.word	0x08003ab8
 800366c:	08003ac2 	.word	0x08003ac2
 8003670:	00000000 	.word	0x00000000
 8003674:	080033cd 	.word	0x080033cd
 8003678:	08003abe 	.word	0x08003abe

0800367c <_printf_common>:
 800367c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003680:	4616      	mov	r6, r2
 8003682:	4698      	mov	r8, r3
 8003684:	688a      	ldr	r2, [r1, #8]
 8003686:	690b      	ldr	r3, [r1, #16]
 8003688:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800368c:	4293      	cmp	r3, r2
 800368e:	bfb8      	it	lt
 8003690:	4613      	movlt	r3, r2
 8003692:	6033      	str	r3, [r6, #0]
 8003694:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003698:	4607      	mov	r7, r0
 800369a:	460c      	mov	r4, r1
 800369c:	b10a      	cbz	r2, 80036a2 <_printf_common+0x26>
 800369e:	3301      	adds	r3, #1
 80036a0:	6033      	str	r3, [r6, #0]
 80036a2:	6823      	ldr	r3, [r4, #0]
 80036a4:	0699      	lsls	r1, r3, #26
 80036a6:	bf42      	ittt	mi
 80036a8:	6833      	ldrmi	r3, [r6, #0]
 80036aa:	3302      	addmi	r3, #2
 80036ac:	6033      	strmi	r3, [r6, #0]
 80036ae:	6825      	ldr	r5, [r4, #0]
 80036b0:	f015 0506 	ands.w	r5, r5, #6
 80036b4:	d106      	bne.n	80036c4 <_printf_common+0x48>
 80036b6:	f104 0a19 	add.w	sl, r4, #25
 80036ba:	68e3      	ldr	r3, [r4, #12]
 80036bc:	6832      	ldr	r2, [r6, #0]
 80036be:	1a9b      	subs	r3, r3, r2
 80036c0:	42ab      	cmp	r3, r5
 80036c2:	dc26      	bgt.n	8003712 <_printf_common+0x96>
 80036c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80036c8:	6822      	ldr	r2, [r4, #0]
 80036ca:	3b00      	subs	r3, #0
 80036cc:	bf18      	it	ne
 80036ce:	2301      	movne	r3, #1
 80036d0:	0692      	lsls	r2, r2, #26
 80036d2:	d42b      	bmi.n	800372c <_printf_common+0xb0>
 80036d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80036d8:	4641      	mov	r1, r8
 80036da:	4638      	mov	r0, r7
 80036dc:	47c8      	blx	r9
 80036de:	3001      	adds	r0, #1
 80036e0:	d01e      	beq.n	8003720 <_printf_common+0xa4>
 80036e2:	6823      	ldr	r3, [r4, #0]
 80036e4:	6922      	ldr	r2, [r4, #16]
 80036e6:	f003 0306 	and.w	r3, r3, #6
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	bf02      	ittt	eq
 80036ee:	68e5      	ldreq	r5, [r4, #12]
 80036f0:	6833      	ldreq	r3, [r6, #0]
 80036f2:	1aed      	subeq	r5, r5, r3
 80036f4:	68a3      	ldr	r3, [r4, #8]
 80036f6:	bf0c      	ite	eq
 80036f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036fc:	2500      	movne	r5, #0
 80036fe:	4293      	cmp	r3, r2
 8003700:	bfc4      	itt	gt
 8003702:	1a9b      	subgt	r3, r3, r2
 8003704:	18ed      	addgt	r5, r5, r3
 8003706:	2600      	movs	r6, #0
 8003708:	341a      	adds	r4, #26
 800370a:	42b5      	cmp	r5, r6
 800370c:	d11a      	bne.n	8003744 <_printf_common+0xc8>
 800370e:	2000      	movs	r0, #0
 8003710:	e008      	b.n	8003724 <_printf_common+0xa8>
 8003712:	2301      	movs	r3, #1
 8003714:	4652      	mov	r2, sl
 8003716:	4641      	mov	r1, r8
 8003718:	4638      	mov	r0, r7
 800371a:	47c8      	blx	r9
 800371c:	3001      	adds	r0, #1
 800371e:	d103      	bne.n	8003728 <_printf_common+0xac>
 8003720:	f04f 30ff 	mov.w	r0, #4294967295
 8003724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003728:	3501      	adds	r5, #1
 800372a:	e7c6      	b.n	80036ba <_printf_common+0x3e>
 800372c:	18e1      	adds	r1, r4, r3
 800372e:	1c5a      	adds	r2, r3, #1
 8003730:	2030      	movs	r0, #48	@ 0x30
 8003732:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003736:	4422      	add	r2, r4
 8003738:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800373c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003740:	3302      	adds	r3, #2
 8003742:	e7c7      	b.n	80036d4 <_printf_common+0x58>
 8003744:	2301      	movs	r3, #1
 8003746:	4622      	mov	r2, r4
 8003748:	4641      	mov	r1, r8
 800374a:	4638      	mov	r0, r7
 800374c:	47c8      	blx	r9
 800374e:	3001      	adds	r0, #1
 8003750:	d0e6      	beq.n	8003720 <_printf_common+0xa4>
 8003752:	3601      	adds	r6, #1
 8003754:	e7d9      	b.n	800370a <_printf_common+0x8e>
	...

08003758 <_printf_i>:
 8003758:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800375c:	7e0f      	ldrb	r7, [r1, #24]
 800375e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003760:	2f78      	cmp	r7, #120	@ 0x78
 8003762:	4691      	mov	r9, r2
 8003764:	4680      	mov	r8, r0
 8003766:	460c      	mov	r4, r1
 8003768:	469a      	mov	sl, r3
 800376a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800376e:	d807      	bhi.n	8003780 <_printf_i+0x28>
 8003770:	2f62      	cmp	r7, #98	@ 0x62
 8003772:	d80a      	bhi.n	800378a <_printf_i+0x32>
 8003774:	2f00      	cmp	r7, #0
 8003776:	f000 80d2 	beq.w	800391e <_printf_i+0x1c6>
 800377a:	2f58      	cmp	r7, #88	@ 0x58
 800377c:	f000 80b9 	beq.w	80038f2 <_printf_i+0x19a>
 8003780:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003784:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003788:	e03a      	b.n	8003800 <_printf_i+0xa8>
 800378a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800378e:	2b15      	cmp	r3, #21
 8003790:	d8f6      	bhi.n	8003780 <_printf_i+0x28>
 8003792:	a101      	add	r1, pc, #4	@ (adr r1, 8003798 <_printf_i+0x40>)
 8003794:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003798:	080037f1 	.word	0x080037f1
 800379c:	08003805 	.word	0x08003805
 80037a0:	08003781 	.word	0x08003781
 80037a4:	08003781 	.word	0x08003781
 80037a8:	08003781 	.word	0x08003781
 80037ac:	08003781 	.word	0x08003781
 80037b0:	08003805 	.word	0x08003805
 80037b4:	08003781 	.word	0x08003781
 80037b8:	08003781 	.word	0x08003781
 80037bc:	08003781 	.word	0x08003781
 80037c0:	08003781 	.word	0x08003781
 80037c4:	08003905 	.word	0x08003905
 80037c8:	0800382f 	.word	0x0800382f
 80037cc:	080038bf 	.word	0x080038bf
 80037d0:	08003781 	.word	0x08003781
 80037d4:	08003781 	.word	0x08003781
 80037d8:	08003927 	.word	0x08003927
 80037dc:	08003781 	.word	0x08003781
 80037e0:	0800382f 	.word	0x0800382f
 80037e4:	08003781 	.word	0x08003781
 80037e8:	08003781 	.word	0x08003781
 80037ec:	080038c7 	.word	0x080038c7
 80037f0:	6833      	ldr	r3, [r6, #0]
 80037f2:	1d1a      	adds	r2, r3, #4
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6032      	str	r2, [r6, #0]
 80037f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003800:	2301      	movs	r3, #1
 8003802:	e09d      	b.n	8003940 <_printf_i+0x1e8>
 8003804:	6833      	ldr	r3, [r6, #0]
 8003806:	6820      	ldr	r0, [r4, #0]
 8003808:	1d19      	adds	r1, r3, #4
 800380a:	6031      	str	r1, [r6, #0]
 800380c:	0606      	lsls	r6, r0, #24
 800380e:	d501      	bpl.n	8003814 <_printf_i+0xbc>
 8003810:	681d      	ldr	r5, [r3, #0]
 8003812:	e003      	b.n	800381c <_printf_i+0xc4>
 8003814:	0645      	lsls	r5, r0, #25
 8003816:	d5fb      	bpl.n	8003810 <_printf_i+0xb8>
 8003818:	f9b3 5000 	ldrsh.w	r5, [r3]
 800381c:	2d00      	cmp	r5, #0
 800381e:	da03      	bge.n	8003828 <_printf_i+0xd0>
 8003820:	232d      	movs	r3, #45	@ 0x2d
 8003822:	426d      	negs	r5, r5
 8003824:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003828:	4859      	ldr	r0, [pc, #356]	@ (8003990 <_printf_i+0x238>)
 800382a:	230a      	movs	r3, #10
 800382c:	e011      	b.n	8003852 <_printf_i+0xfa>
 800382e:	6821      	ldr	r1, [r4, #0]
 8003830:	6833      	ldr	r3, [r6, #0]
 8003832:	0608      	lsls	r0, r1, #24
 8003834:	f853 5b04 	ldr.w	r5, [r3], #4
 8003838:	d402      	bmi.n	8003840 <_printf_i+0xe8>
 800383a:	0649      	lsls	r1, r1, #25
 800383c:	bf48      	it	mi
 800383e:	b2ad      	uxthmi	r5, r5
 8003840:	2f6f      	cmp	r7, #111	@ 0x6f
 8003842:	4853      	ldr	r0, [pc, #332]	@ (8003990 <_printf_i+0x238>)
 8003844:	6033      	str	r3, [r6, #0]
 8003846:	bf14      	ite	ne
 8003848:	230a      	movne	r3, #10
 800384a:	2308      	moveq	r3, #8
 800384c:	2100      	movs	r1, #0
 800384e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003852:	6866      	ldr	r6, [r4, #4]
 8003854:	60a6      	str	r6, [r4, #8]
 8003856:	2e00      	cmp	r6, #0
 8003858:	bfa2      	ittt	ge
 800385a:	6821      	ldrge	r1, [r4, #0]
 800385c:	f021 0104 	bicge.w	r1, r1, #4
 8003860:	6021      	strge	r1, [r4, #0]
 8003862:	b90d      	cbnz	r5, 8003868 <_printf_i+0x110>
 8003864:	2e00      	cmp	r6, #0
 8003866:	d04b      	beq.n	8003900 <_printf_i+0x1a8>
 8003868:	4616      	mov	r6, r2
 800386a:	fbb5 f1f3 	udiv	r1, r5, r3
 800386e:	fb03 5711 	mls	r7, r3, r1, r5
 8003872:	5dc7      	ldrb	r7, [r0, r7]
 8003874:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003878:	462f      	mov	r7, r5
 800387a:	42bb      	cmp	r3, r7
 800387c:	460d      	mov	r5, r1
 800387e:	d9f4      	bls.n	800386a <_printf_i+0x112>
 8003880:	2b08      	cmp	r3, #8
 8003882:	d10b      	bne.n	800389c <_printf_i+0x144>
 8003884:	6823      	ldr	r3, [r4, #0]
 8003886:	07df      	lsls	r7, r3, #31
 8003888:	d508      	bpl.n	800389c <_printf_i+0x144>
 800388a:	6923      	ldr	r3, [r4, #16]
 800388c:	6861      	ldr	r1, [r4, #4]
 800388e:	4299      	cmp	r1, r3
 8003890:	bfde      	ittt	le
 8003892:	2330      	movle	r3, #48	@ 0x30
 8003894:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003898:	f106 36ff 	addle.w	r6, r6, #4294967295
 800389c:	1b92      	subs	r2, r2, r6
 800389e:	6122      	str	r2, [r4, #16]
 80038a0:	f8cd a000 	str.w	sl, [sp]
 80038a4:	464b      	mov	r3, r9
 80038a6:	aa03      	add	r2, sp, #12
 80038a8:	4621      	mov	r1, r4
 80038aa:	4640      	mov	r0, r8
 80038ac:	f7ff fee6 	bl	800367c <_printf_common>
 80038b0:	3001      	adds	r0, #1
 80038b2:	d14a      	bne.n	800394a <_printf_i+0x1f2>
 80038b4:	f04f 30ff 	mov.w	r0, #4294967295
 80038b8:	b004      	add	sp, #16
 80038ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038be:	6823      	ldr	r3, [r4, #0]
 80038c0:	f043 0320 	orr.w	r3, r3, #32
 80038c4:	6023      	str	r3, [r4, #0]
 80038c6:	4833      	ldr	r0, [pc, #204]	@ (8003994 <_printf_i+0x23c>)
 80038c8:	2778      	movs	r7, #120	@ 0x78
 80038ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80038ce:	6823      	ldr	r3, [r4, #0]
 80038d0:	6831      	ldr	r1, [r6, #0]
 80038d2:	061f      	lsls	r7, r3, #24
 80038d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80038d8:	d402      	bmi.n	80038e0 <_printf_i+0x188>
 80038da:	065f      	lsls	r7, r3, #25
 80038dc:	bf48      	it	mi
 80038de:	b2ad      	uxthmi	r5, r5
 80038e0:	6031      	str	r1, [r6, #0]
 80038e2:	07d9      	lsls	r1, r3, #31
 80038e4:	bf44      	itt	mi
 80038e6:	f043 0320 	orrmi.w	r3, r3, #32
 80038ea:	6023      	strmi	r3, [r4, #0]
 80038ec:	b11d      	cbz	r5, 80038f6 <_printf_i+0x19e>
 80038ee:	2310      	movs	r3, #16
 80038f0:	e7ac      	b.n	800384c <_printf_i+0xf4>
 80038f2:	4827      	ldr	r0, [pc, #156]	@ (8003990 <_printf_i+0x238>)
 80038f4:	e7e9      	b.n	80038ca <_printf_i+0x172>
 80038f6:	6823      	ldr	r3, [r4, #0]
 80038f8:	f023 0320 	bic.w	r3, r3, #32
 80038fc:	6023      	str	r3, [r4, #0]
 80038fe:	e7f6      	b.n	80038ee <_printf_i+0x196>
 8003900:	4616      	mov	r6, r2
 8003902:	e7bd      	b.n	8003880 <_printf_i+0x128>
 8003904:	6833      	ldr	r3, [r6, #0]
 8003906:	6825      	ldr	r5, [r4, #0]
 8003908:	6961      	ldr	r1, [r4, #20]
 800390a:	1d18      	adds	r0, r3, #4
 800390c:	6030      	str	r0, [r6, #0]
 800390e:	062e      	lsls	r6, r5, #24
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	d501      	bpl.n	8003918 <_printf_i+0x1c0>
 8003914:	6019      	str	r1, [r3, #0]
 8003916:	e002      	b.n	800391e <_printf_i+0x1c6>
 8003918:	0668      	lsls	r0, r5, #25
 800391a:	d5fb      	bpl.n	8003914 <_printf_i+0x1bc>
 800391c:	8019      	strh	r1, [r3, #0]
 800391e:	2300      	movs	r3, #0
 8003920:	6123      	str	r3, [r4, #16]
 8003922:	4616      	mov	r6, r2
 8003924:	e7bc      	b.n	80038a0 <_printf_i+0x148>
 8003926:	6833      	ldr	r3, [r6, #0]
 8003928:	1d1a      	adds	r2, r3, #4
 800392a:	6032      	str	r2, [r6, #0]
 800392c:	681e      	ldr	r6, [r3, #0]
 800392e:	6862      	ldr	r2, [r4, #4]
 8003930:	2100      	movs	r1, #0
 8003932:	4630      	mov	r0, r6
 8003934:	f7fc fc5c 	bl	80001f0 <memchr>
 8003938:	b108      	cbz	r0, 800393e <_printf_i+0x1e6>
 800393a:	1b80      	subs	r0, r0, r6
 800393c:	6060      	str	r0, [r4, #4]
 800393e:	6863      	ldr	r3, [r4, #4]
 8003940:	6123      	str	r3, [r4, #16]
 8003942:	2300      	movs	r3, #0
 8003944:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003948:	e7aa      	b.n	80038a0 <_printf_i+0x148>
 800394a:	6923      	ldr	r3, [r4, #16]
 800394c:	4632      	mov	r2, r6
 800394e:	4649      	mov	r1, r9
 8003950:	4640      	mov	r0, r8
 8003952:	47d0      	blx	sl
 8003954:	3001      	adds	r0, #1
 8003956:	d0ad      	beq.n	80038b4 <_printf_i+0x15c>
 8003958:	6823      	ldr	r3, [r4, #0]
 800395a:	079b      	lsls	r3, r3, #30
 800395c:	d413      	bmi.n	8003986 <_printf_i+0x22e>
 800395e:	68e0      	ldr	r0, [r4, #12]
 8003960:	9b03      	ldr	r3, [sp, #12]
 8003962:	4298      	cmp	r0, r3
 8003964:	bfb8      	it	lt
 8003966:	4618      	movlt	r0, r3
 8003968:	e7a6      	b.n	80038b8 <_printf_i+0x160>
 800396a:	2301      	movs	r3, #1
 800396c:	4632      	mov	r2, r6
 800396e:	4649      	mov	r1, r9
 8003970:	4640      	mov	r0, r8
 8003972:	47d0      	blx	sl
 8003974:	3001      	adds	r0, #1
 8003976:	d09d      	beq.n	80038b4 <_printf_i+0x15c>
 8003978:	3501      	adds	r5, #1
 800397a:	68e3      	ldr	r3, [r4, #12]
 800397c:	9903      	ldr	r1, [sp, #12]
 800397e:	1a5b      	subs	r3, r3, r1
 8003980:	42ab      	cmp	r3, r5
 8003982:	dcf2      	bgt.n	800396a <_printf_i+0x212>
 8003984:	e7eb      	b.n	800395e <_printf_i+0x206>
 8003986:	2500      	movs	r5, #0
 8003988:	f104 0619 	add.w	r6, r4, #25
 800398c:	e7f5      	b.n	800397a <_printf_i+0x222>
 800398e:	bf00      	nop
 8003990:	08003ac9 	.word	0x08003ac9
 8003994:	08003ada 	.word	0x08003ada

08003998 <memmove>:
 8003998:	4288      	cmp	r0, r1
 800399a:	b510      	push	{r4, lr}
 800399c:	eb01 0402 	add.w	r4, r1, r2
 80039a0:	d902      	bls.n	80039a8 <memmove+0x10>
 80039a2:	4284      	cmp	r4, r0
 80039a4:	4623      	mov	r3, r4
 80039a6:	d807      	bhi.n	80039b8 <memmove+0x20>
 80039a8:	1e43      	subs	r3, r0, #1
 80039aa:	42a1      	cmp	r1, r4
 80039ac:	d008      	beq.n	80039c0 <memmove+0x28>
 80039ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80039b6:	e7f8      	b.n	80039aa <memmove+0x12>
 80039b8:	4402      	add	r2, r0
 80039ba:	4601      	mov	r1, r0
 80039bc:	428a      	cmp	r2, r1
 80039be:	d100      	bne.n	80039c2 <memmove+0x2a>
 80039c0:	bd10      	pop	{r4, pc}
 80039c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80039c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80039ca:	e7f7      	b.n	80039bc <memmove+0x24>

080039cc <_sbrk_r>:
 80039cc:	b538      	push	{r3, r4, r5, lr}
 80039ce:	4d06      	ldr	r5, [pc, #24]	@ (80039e8 <_sbrk_r+0x1c>)
 80039d0:	2300      	movs	r3, #0
 80039d2:	4604      	mov	r4, r0
 80039d4:	4608      	mov	r0, r1
 80039d6:	602b      	str	r3, [r5, #0]
 80039d8:	f7fd f8ea 	bl	8000bb0 <_sbrk>
 80039dc:	1c43      	adds	r3, r0, #1
 80039de:	d102      	bne.n	80039e6 <_sbrk_r+0x1a>
 80039e0:	682b      	ldr	r3, [r5, #0]
 80039e2:	b103      	cbz	r3, 80039e6 <_sbrk_r+0x1a>
 80039e4:	6023      	str	r3, [r4, #0]
 80039e6:	bd38      	pop	{r3, r4, r5, pc}
 80039e8:	20000274 	.word	0x20000274

080039ec <memcpy>:
 80039ec:	440a      	add	r2, r1
 80039ee:	4291      	cmp	r1, r2
 80039f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80039f4:	d100      	bne.n	80039f8 <memcpy+0xc>
 80039f6:	4770      	bx	lr
 80039f8:	b510      	push	{r4, lr}
 80039fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a02:	4291      	cmp	r1, r2
 8003a04:	d1f9      	bne.n	80039fa <memcpy+0xe>
 8003a06:	bd10      	pop	{r4, pc}

08003a08 <_realloc_r>:
 8003a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a0c:	4680      	mov	r8, r0
 8003a0e:	4615      	mov	r5, r2
 8003a10:	460c      	mov	r4, r1
 8003a12:	b921      	cbnz	r1, 8003a1e <_realloc_r+0x16>
 8003a14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a18:	4611      	mov	r1, r2
 8003a1a:	f7ff bc4b 	b.w	80032b4 <_malloc_r>
 8003a1e:	b92a      	cbnz	r2, 8003a2c <_realloc_r+0x24>
 8003a20:	f7ff fbdc 	bl	80031dc <_free_r>
 8003a24:	2400      	movs	r4, #0
 8003a26:	4620      	mov	r0, r4
 8003a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a2c:	f000 f81a 	bl	8003a64 <_malloc_usable_size_r>
 8003a30:	4285      	cmp	r5, r0
 8003a32:	4606      	mov	r6, r0
 8003a34:	d802      	bhi.n	8003a3c <_realloc_r+0x34>
 8003a36:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003a3a:	d8f4      	bhi.n	8003a26 <_realloc_r+0x1e>
 8003a3c:	4629      	mov	r1, r5
 8003a3e:	4640      	mov	r0, r8
 8003a40:	f7ff fc38 	bl	80032b4 <_malloc_r>
 8003a44:	4607      	mov	r7, r0
 8003a46:	2800      	cmp	r0, #0
 8003a48:	d0ec      	beq.n	8003a24 <_realloc_r+0x1c>
 8003a4a:	42b5      	cmp	r5, r6
 8003a4c:	462a      	mov	r2, r5
 8003a4e:	4621      	mov	r1, r4
 8003a50:	bf28      	it	cs
 8003a52:	4632      	movcs	r2, r6
 8003a54:	f7ff ffca 	bl	80039ec <memcpy>
 8003a58:	4621      	mov	r1, r4
 8003a5a:	4640      	mov	r0, r8
 8003a5c:	f7ff fbbe 	bl	80031dc <_free_r>
 8003a60:	463c      	mov	r4, r7
 8003a62:	e7e0      	b.n	8003a26 <_realloc_r+0x1e>

08003a64 <_malloc_usable_size_r>:
 8003a64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a68:	1f18      	subs	r0, r3, #4
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	bfbc      	itt	lt
 8003a6e:	580b      	ldrlt	r3, [r1, r0]
 8003a70:	18c0      	addlt	r0, r0, r3
 8003a72:	4770      	bx	lr

08003a74 <_init>:
 8003a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a76:	bf00      	nop
 8003a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a7a:	bc08      	pop	{r3}
 8003a7c:	469e      	mov	lr, r3
 8003a7e:	4770      	bx	lr

08003a80 <_fini>:
 8003a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a82:	bf00      	nop
 8003a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a86:	bc08      	pop	{r3}
 8003a88:	469e      	mov	lr, r3
 8003a8a:	4770      	bx	lr
